<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ocean Pig Blog</title>
  
  <subtitle>求知若渴，虚怀若谷</subtitle>
  <link href="https://colania.github.io/atom.xml" rel="self"/>
  
  <link href="https://colania.github.io/"/>
  <updated>2023-04-06T01:29:59.168Z</updated>
  <id>https://colania.github.io/</id>
  
  <author>
    <name>WWEI</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LPL英文流观赛常见词语</title>
    <link href="https://colania.github.io/2023/04/05/lpl-ying-wen-liu-guan-sai-chang-jian-ci-yu/"/>
    <id>https://colania.github.io/2023/04/05/lpl-ying-wen-liu-guan-sai-chang-jian-ci-yu/</id>
    <published>2023-04-05T12:05:58.000Z</published>
    <updated>2023-04-06T01:29:59.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LPL英文流观赛常见词语"><a href="#LPL英文流观赛常见词语" class="headerlink" title="LPL英文流观赛常见词语"></a>LPL英文流观赛常见词语</h1><p>兴趣会让人进步更快，所以最近开始看起了英文流解说的LPL比赛。一开始必然会有很多专业性的词语听不懂，以及游戏解说们的口速都是飞快的。。。 所以看起来还是比较难。但是好在自身能分析游戏战况，能大致清楚当前发生了什么事情。所以了解一些常用词语，以及听懂一些关键词，对于听懂英文流解说还是有很大帮助的。<code>听懂关键词+ 自己对游戏的了解</code>  大致和 解说想表达的意思差不多多少。</p><h3 id="分路"><a href="#分路" class="headerlink" title="分路"></a>分路</h3><table><thead><tr><th>top</th><th>上路</th></tr></thead><tbody><tr><td>mid</td><td>中路</td></tr><tr><td>jug</td><td>打野</td></tr><tr><td>adc</td><td>下路</td></tr><tr><td>sup</td><td>辅助</td></tr></tbody></table><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>AD</th><th>攻击力</th></tr></thead><tbody><tr><td>AP</td><td>法强</td></tr><tr><td>mana</td><td>蓝量</td></tr><tr><td>AS</td><td>攻速</td></tr><tr><td>MS</td><td>一速</td></tr><tr><td>crit (chance)</td><td>暴击几率</td></tr><tr><td>crit dmg</td><td>暴击伤害</td></tr><tr><td>ar</td><td>护甲</td></tr><tr><td>mr</td><td>魔抗</td></tr><tr><td>life steal</td><td>吸血</td></tr><tr><td>regen</td><td>回复</td></tr><tr><td>OP &#x2F; broken &#x2F; imba</td><td>强势</td></tr><tr><td>item</td><td>装备</td></tr><tr><td>base</td><td>高地</td></tr><tr><td>base gate</td><td>高地们</td></tr><tr><td>nexus</td><td>基地</td></tr><tr><td>inhib</td><td>水晶</td></tr><tr><td>outer turret</td><td>一塔</td></tr><tr><td>inner turret</td><td>二塔</td></tr><tr><td>inhib&#x2F;base turret</td><td>高地塔</td></tr><tr><td>nexus turret</td><td>门牙塔</td></tr><tr><td>fountain</td><td>泉水</td></tr><tr><td>drag&#x2F;drake&#x2F;DR</td><td>小龙</td></tr><tr><td>herald</td><td>先锋</td></tr><tr><td>baron&#x2F;BR</td><td>大龙</td></tr><tr><td>crab</td><td>蟹</td></tr><tr><td>frog</td><td>蛙</td></tr><tr><td>birds</td><td>F6</td></tr><tr><td>krugs</td><td>石头人</td></tr><tr><td>wolves</td><td>三狼</td></tr><tr><td>passive</td><td>被动</td></tr><tr><td>takedown</td><td>击杀和助攻</td></tr><tr><td>hybrid dmg</td><td>混伤</td></tr><tr><td>true dmg</td><td>真伤</td></tr><tr><td>dot dmg</td><td>持续伤</td></tr><tr><td>pure dmg</td><td>泉水伤害&#x2F;英雄自我伤害</td></tr><tr><td>projectile</td><td>发射体(能被亚索挡住的技能的飞行实体)</td></tr><tr><td>on-hit effect</td><td>攻击特效</td></tr><tr><td>OB&#x2F;spectator</td><td>观战</td></tr><tr><td>fury</td><td>怒气</td></tr><tr><td>healing</td><td>奶</td></tr><tr><td>spell shield</td><td>魔法盾</td></tr><tr><td>trap</td><td>陷阱(包括盒子)</td></tr><tr><td>stealth</td><td>潜行(包括伪装和隐身，受到伤害会有微光，扫描能看到影子)</td></tr><tr><td>camouflaged</td><td>伪装的(靠近会被看到，真眼也会看到)</td></tr><tr><td>invisible</td><td>隐身</td></tr><tr><td>active skill&#x2F;spell</td><td>主动技能</td></tr><tr><td>AOE spell</td><td>范围技能</td></tr><tr><td>skillshot&#x2F;direction-targeted spell</td><td>指向技能(以方向射出去，能空的</td></tr><tr><td>ground-targeted spell</td><td>区域技能(如火男W，有范围的技能)</td></tr><tr><td>unit-targeted spell</td><td>锁人技能</td></tr></tbody></table><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><table><thead><tr><th>melee</th><th>近战</th></tr></thead><tbody><tr><td>ranged</td><td>远程</td></tr><tr><td>bruiser&#x2F;fighter&#x2F;off-tank</td><td>战士</td></tr><tr><td>juggernaut</td><td>重装战士</td></tr><tr><td>tank</td><td>坦克</td></tr><tr><td>assassin</td><td>刺客</td></tr><tr><td>marksman</td><td>射手</td></tr><tr><td>mage</td><td>法师</td></tr><tr><td>split-pusher</td><td>分推</td></tr><tr><td>go tanky</td><td>出肉</td></tr><tr><td>tankiness</td><td>坦度</td></tr><tr><td>aatrox OP af (as fuck)</td><td>剑魔强的一笔</td></tr><tr><td>QSS is broken</td><td>水银细带很强</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="节奏"><a href="#节奏" class="headerlink" title="节奏"></a>节奏</h3><table><thead><tr><th>invade</th><th>入侵野区</th></tr></thead><tbody><tr><td>leash red</td><td>帮红</td></tr><tr><td>top and bot swap lanes</td><td>换线</td></tr><tr><td>freeze lane</td><td>控线</td></tr><tr><td>zoning</td><td>控线(压出经验区或血线压制)</td></tr><tr><td>push</td><td>推线</td></tr><tr><td>push 4 me</td><td>帮推</td></tr><tr><td>gank top</td><td>抓上</td></tr><tr><td>dive top</td><td>越上</td></tr><tr><td>counter gank</td><td>反蹲</td></tr><tr><td>pink</td><td>真眼</td></tr><tr><td>minions&#x2F;winions&#x2F;creeps</td><td>小兵</td></tr><tr><td>cs</td><td>补刀</td></tr><tr><td>top mia</td><td>上路miss</td></tr><tr><td>laning phase</td><td>对线期</td></tr><tr><td>stopwatch</td><td>秒表</td></tr><tr><td>has zhonya &#x2F; his zhonya is up &#x2F; his zhonya’s CDed</td><td>有中亚</td></tr><tr><td>cleanse</td><td>净化</td></tr><tr><td>out of range</td><td>射程不够</td></tr><tr><td>feed tower&#x2F;turret</td><td>送塔</td></tr><tr><td>execution spell&#x2F;skill</td><td>斩杀</td></tr><tr><td>escape</td><td>跑路</td></tr><tr><td>snowball</td><td>滚雪球</td></tr><tr><td>Ivern is fed</td><td>很肥</td></tr><tr><td>turtling to late game</td><td>苟到后期</td></tr><tr><td>early game</td><td>前期</td></tr><tr><td>late game</td><td>后期</td></tr><tr><td>warded</td><td>有眼</td></tr><tr><td>bait in bush</td><td>草丛埋伏</td></tr><tr><td>bait</td><td>勾引</td></tr><tr><td>evade</td><td>躲技能</td></tr><tr><td>instakill</td><td>秒杀</td></tr><tr><td>camp mid</td><td>住中路</td></tr><tr><td>backdoor</td><td>偷家</td></tr><tr><td>nuke him</td><td>秒了</td></tr><tr><td>team fight</td><td>团战</td></tr><tr><td>peel 4 nunu</td><td>保努努</td></tr><tr><td>pick teemo</td><td>选提莫</td></tr><tr><td>counter pick</td><td>counter位</td></tr><tr><td>flank</td><td>偷屁股</td></tr><tr><td>Overextend</td><td>浪被抓</td></tr><tr><td>re-engage</td><td>反开团</td></tr><tr><td>dish out damage</td><td>灌伤害</td></tr><tr><td>bounce back&#x2F; come back</td><td>翻盘</td></tr><tr><td>dragon pit</td><td>龙坑</td></tr><tr><td>tournament favorite</td><td>夺冠热门</td></tr><tr><td>macro</td><td>运营</td></tr><tr><td>map awareness</td><td>地图）意识</td></tr><tr><td>funneling sb</td><td>资源倾斜给某人</td></tr><tr><td>stall</td><td>托后期</td></tr><tr><td>sandbag</td><td>吊打</td></tr><tr><td>withstand</td><td>抗住</td></tr><tr><td>Somebody has been irrelevant the whole game</td><td>隐身、没做事情</td></tr><tr><td>somebody got outplayed&#x2F;outclassed</td><td>被秀了</td></tr><tr><td>clear waves</td><td>清线</td></tr><tr><td>melt</td><td>瞬间融化</td></tr><tr><td>flash against wall</td><td>闪现撞墙</td></tr><tr><td>flash in place</td><td>原地闪现</td></tr><tr><td>Somebody is playing to his standard&#x2F;in form</td><td>某人正常发挥</td></tr><tr><td>underperform</td><td>发挥失常</td></tr></tbody></table><h3 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h3><table><thead><tr><th>root&#x2F;snare</th><th>定身</th></tr></thead><tbody><tr><td>stun</td><td>眩晕</td></tr><tr><td>knock aside</td><td>击开</td></tr><tr><td>knockback</td><td>击退</td></tr><tr><td>knockup</td><td>击飞</td></tr><tr><td>pull&#x2F;hook</td><td>钩</td></tr><tr><td>blind</td><td>致盲</td></tr><tr><td>fear</td><td>恐惧</td></tr><tr><td>ground</td><td>缚地</td></tr><tr><td>taunt</td><td>嘲讽</td></tr><tr><td>stasis</td><td>金身</td></tr></tbody></table><p><strong>暂时找到这些，后续不断补充。。</strong> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LPL英文流观赛常见词语&quot;&gt;&lt;a href=&quot;#LPL英文流观赛常见词语&quot; class=&quot;headerlink&quot; title=&quot;LPL英文流观赛常见词语&quot;&gt;&lt;/a&gt;LPL英文流观赛常见词语&lt;/h1&gt;&lt;p&gt;兴趣会让人进步更快，所以最近开始看起了英文流解说的LPL比赛</summary>
      
    
    
    
    <category term="生活" scheme="https://colania.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="英语" scheme="https://colania.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo时间轮</title>
    <link href="https://colania.github.io/2023/04/02/dubbo-shi-jian-lun/"/>
    <id>https://colania.github.io/2023/04/02/dubbo-shi-jian-lun/</id>
    <published>2023-04-02T13:58:16.000Z</published>
    <updated>2023-04-02T14:59:12.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dubbo时间轮"><a href="#Dubbo时间轮" class="headerlink" title="Dubbo时间轮"></a>Dubbo时间轮</h1><p><strong>时间轮是一种高效的、批量管理定时任务的调度模型</strong>。时间轮一般会实现成一个环形结构，类似一个时钟，分为很多槽，一个槽代表一个时间间隔，每个槽使用双向链表存储定时任务；指针周期性地跳动，跳动到一个槽位，就执行该槽位的定时任务。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/CgqCHl8yQfKAEM41AAB8fTu5PCY623.png" alt="1.png"></p><p>需要注意的是，单层时间轮的容量和精度都是有限的，对于精度要求特别高、时间跨度特别大或是海量定时任务需要调度的场景，通常会使用<strong>多级时间轮</strong>以及<strong>持久化存储与时间轮结合</strong>的方案。</p><p>那在 Dubbo 中，时间轮的具体实现方式是怎样的呢？Dubbo 的时间轮实现位于 dubbo-common 模块的 <code>org.apache.dubbo.common.timer </code>包中，下面我们就来分析时间轮涉及的核心接口和实现。</p><h2 id="核心接口"><a href="#核心接口" class="headerlink" title="核心接口"></a>核心接口</h2><h3 id="TimerTask接口"><a href="#TimerTask接口" class="headerlink" title="TimerTask接口"></a>TimerTask接口</h3><p>在 Dubbo 中，所有的定时任务都要继承 <strong>TimerTask 接口</strong>。TimerTask 接口非常简单，只定义了一个 run() 方法，该方法的入参是一个 Timeout 接口的对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * A task which is executed after the delay specified with * &#123;@link Timer#newTimeout(TimerTask, long, TimeUnit)&#125; (TimerTask, long, TimeUnit)&#125;. */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TimerTask</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Executed after the delay specified with     * &#123;@link Timer#newTimeout(TimerTask, long, TimeUnit)&#125;.     *     * @param timeout a handle which is associated with this task     */</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Timeout</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Timeout接口"><a href="#Timeout接口" class="headerlink" title="Timeout接口"></a>Timeout接口</h3><p>Timeout 对象与 TimerTask 对象一一对应，两者的关系类似于线程池返回的 Future 对象与提交到线程池中的任务对象之间的关系。通过 Timeout 对象，我们不仅可以查看定时任务的状态，还可以操作定时任务（例如取消关联的定时任务）。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230402222206190.png" alt="image-20230402222206190"></p><h3 id="Timer接口"><a href="#Timer接口" class="headerlink" title="Timer接口"></a>Timer接口</h3><p>Timer 接口定义了定时器的基本行为，如下图所示，其核心是 newTimeout() 方法：提交一个定时任务（TimerTask）并返回关联的 Timeout 对象，这有点类似于向线程池提交任务的感觉。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230402222333395.png" alt="image-20230402222333395"></p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230402223154974.png" alt="image-20230402223154974"></p><h2 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h2><h3 id="HashedWheelTimeout"><a href="#HashedWheelTimeout" class="headerlink" title="HashedWheelTimeout"></a>HashedWheelTimeout</h3><p>HashedWheelTimeout 是 Timeout 接口的唯一实现，是 HashedWheelTimer 的内部类。HashedWheelTimeout 扮演了两个角色：</p><ul><li>第一个，时间轮中双向链表的<strong>节点</strong>，即定时任务 TimerTask 在 HashedWheelTimer 中的容器。</li><li>第二个，定时任务 TimerTask 提交到 HashedWheelTimer 之后返回的<strong>句柄</strong>（Handle），用于在时间轮外部查看和控制定时任务。</li></ul><h4 id="HashedWheelTimeout-中的核心字段如下："><a href="#HashedWheelTimeout-中的核心字段如下：" class="headerlink" title="HashedWheelTimeout 中的核心字段如下："></a>HashedWheelTimeout 中的核心字段如下：</h4><blockquote><ul><li><strong>prev、next（HashedWheelTimeout类型）</strong>，分别对应当前定时任务在链表中的前驱节点和后继节点。</li><li><strong>task（TimerTask类型）</strong>，指实际被调度的任务。</li><li><strong>deadline（long类型）</strong>，指定时任务执行的时间。这个时间是在创建 HashedWheelTimeout 时指定的，计算公式是：currentTime（创建 HashedWheelTimeout 的时间） + delay（任务延迟时间） - startTime（HashedWheelTimer 的启动时间），时间单位为纳秒。</li><li><strong>state（volatile int类型）</strong>，指定时任务当前所处状态，可选的有三个，分别是 INIT（0）、CANCELLED（1）和 EXPIRED（2）。另外，还有一个 STATE_UPDATER 字段（AtomicIntegerFieldUpdater类型）实现 state 状态变更的原子性。</li><li><strong>remainingRounds（long类型）</strong>，指当前任务剩余的时钟周期数。时间轮所能表示的时间长度是有限的，在任务到期时间与当前时刻的时间差，超过时间轮单圈能表示的时长，就出现了套圈的情况，需要该字段值表示剩余的时钟周期。</li></ul></blockquote><h4 id="HashedWheelTimeout-中的核心方法有："><a href="#HashedWheelTimeout-中的核心方法有：" class="headerlink" title="HashedWheelTimeout 中的核心方法有："></a>HashedWheelTimeout 中的核心方法有：</h4><blockquote><ul><li><strong>isCancelled()、isExpired() 、state() 方法，</strong> 主要用于检查当前 HashedWheelTimeout 状态。</li><li><strong>cancel() 方法，</strong> 将当前 HashedWheelTimeout 的状态设置为 CANCELLED，并将当前 HashedWheelTimeout 添加到 cancelledTimeouts 队列中等待销毁。</li><li><strong>expire() 方法，</strong> 当任务到期时，会调用该方法将当前 HashedWheelTimeout 设置为 EXPIRED 状态，然后调用其中的 TimerTask 的 run() 方法执行定时任务。</li><li><strong>remove() 方法，</strong> 将当前 HashedWheelTimeout 从时间轮中删除。</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HashedWheelTimeout</span> <span class="token keyword">implements</span> <span class="token class-name">Timeout</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="HashedWheelBucket"><a href="#HashedWheelBucket" class="headerlink" title="HashedWheelBucket"></a>HashedWheelBucket</h3><p>HashedWheelBucket 是时间轮中的一个槽，时间轮中的槽实际上就是一个用于缓存和管理双向链表的容器，双向链表中的每一个节点就是一个 HashedWheelTimeout 对象，也就关联了一个 TimerTask 定时任务。</p><p>HashedWheelBucket 持有双向链表的首尾两个节点，分别是 head 和 tail 两个字段，再加上每个 HashedWheelTimeout 节点均持有前驱和后继的引用，这样就可以正向或是逆向遍历整个双向链表了。</p><blockquote><ul><li><strong>addTimeout() 方法</strong>：新增 HashedWheelTimeout 到双向链表的尾部。</li><li><strong>pollTimeout() 方法</strong>：移除双向链表中的头结点，并将其返回。</li><li><strong>remove() 方法</strong>：从双向链表中移除指定的 HashedWheelTimeout 节点。</li><li><strong>clearTimeouts() 方法</strong>：循环调用 pollTimeout() 方法处理整个双向链表，并返回所有未超时或者未被取消的任务。</li><li><strong>expireTimeouts() 方法</strong>：遍历双向链表中的全部 HashedWheelTimeout 节点。 在处理到期的定时任务时，会通过 remove() 方法取出，并调用其 expire() 方法执行；对于已取消的任务，通过 remove() 方法取出后直接丢弃；对于未到期的任务，会将 remainingRounds 字段（剩余时钟周期数）减一。</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HashedWheelBucket</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * Used for the linked-list datastructure         */</span>        <span class="token keyword">private</span> <span class="token class-name">HashedWheelTimeout</span> head<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">HashedWheelTimeout</span> tail<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HashedWheelTimer"><a href="#HashedWheelTimer" class="headerlink" title="HashedWheelTimer"></a>HashedWheelTimer</h3><p>HashedWheelTimer 是 Timer 接口的实现，它通过时间轮算法实现了一个定时器。</p><p>HashedWheelTimer 会根据当前时间轮指针选定对应的槽（HashedWheelBucket），从双向链表的头部开始迭代，对每个定时任务（HashedWheelTimeout）进行计算，属于当前时钟周期则取出运行，不属于则将其剩余的时钟周期数减一操作。</p><blockquote><ul><li><strong>workerState（volatile int类型）</strong>：时间轮当前所处状态，可选值有 init、started、shutdown。同时，有相应的 AtomicIntegerFieldUpdater 实现 workerState 的原子修改。</li><li><strong>startTime（long类型）</strong>：当前时间轮的启动时间，提交到该时间轮的定时任务的 deadline 字段值均以该时间戳为起点进行计算。</li><li><strong>wheel（HashedWheelBucket[]类型）</strong>：该数组就是时间轮的环形队列，每一个元素都是一个槽。当指定时间轮槽数为 n 时，实际上会取大于且最靠近 n 的 2 的幂次方值。</li><li><strong>timeouts、cancelledTimeouts（LinkedBlockingQueue类型）</strong>：timeouts 队列用于缓冲外部提交时间轮中的定时任务，cancelledTimeouts 队列用于暂存取消的定时任务。HashedWheelTimer 会在处理 HashedWheelBucket 的双向链表之前，先处理这两个队列中的数据。</li><li><strong>tick（long类型）</strong>：该字段在 HashedWheelTimer$Worker 中，是时间轮的指针，是一个步长为 1 的单调递增计数器。</li><li><strong>mask（int类型）</strong>：掩码， mask &#x3D; wheel.length - 1，执行 ticks &amp; mask 便能定位到对应的时钟槽。</li><li><strong>ticksDuration（long类型）</strong>：时间指针每次加 1 所代表的实际时间，单位为纳秒。</li><li><strong>pendingTimeouts（AtomicLong类型）</strong>：当前时间轮剩余的定时任务总数。</li><li><strong>workerThread（Thread类型）</strong>：时间轮内部真正执行定时任务的线程。</li><li><strong>worker（Worker类型）</strong>：真正执行定时任务的逻辑封装这个 Runnable 对象中。</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashedWheelTimer</span> <span class="token keyword">implements</span> <span class="token class-name">Timer</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>时间轮对外提供了一个 newTimeout() 接口用于提交定时任务，在定时任务进入到 timeouts 队列之前会先调用 start() 方法启动时间轮，其中会完成下面两个关键步骤：</p><ol><li>确定时间轮的 startTime 字段；</li><li>启动 workerThread 线程，开始执行 worker 任务。</li><li>之后根据 startTime 计算该定时任务的 deadline 字段，最后才能将定时任务封装成 HashedWheelTimeout 并添加到 timeouts 队列。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Timeout</span> <span class="token function">newTimeout</span><span class="token punctuation">(</span><span class="token class-name">TimerTask</span> task<span class="token punctuation">,</span> <span class="token keyword">long</span> delay<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>unit <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"unit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//判断当前时间轮剩余的定时任务总数。</span>    <span class="token keyword">long</span> pendingTimeoutsCount <span class="token operator">=</span> pendingTimeouts<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxPendingTimeouts <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pendingTimeoutsCount <span class="token operator">></span> maxPendingTimeouts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pendingTimeouts<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RejectedExecutionException</span><span class="token punctuation">(</span><span class="token string">"Number of pending timeouts ("</span>                <span class="token operator">+</span> pendingTimeoutsCount <span class="token operator">+</span> <span class="token string">") is greater than or equal to maximum allowed pending "</span>                <span class="token operator">+</span> <span class="token string">"timeouts ("</span> <span class="token operator">+</span> maxPendingTimeouts <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//启动时间轮内部真正执行定时任务。</span>    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Add the timeout to the timeout queue which will be processed on the next tick.</span>    <span class="token comment">// During processing all the queued HashedWheelTimeouts will be added to the correct HashedWheelBucket.</span>    <span class="token keyword">long</span> deadline <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>    <span class="token comment">// Guard against overflow.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> deadline <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        deadline <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">HashedWheelTimeout</span> timeout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashedWheelTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> task<span class="token punctuation">,</span> deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>    timeouts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> timeout<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们来分析时间轮指针一次转动的全流程。</p><ol><li>时间轮指针转动，时间轮周期开始。</li><li>清理用户主动取消的定时任务，这些定时任务在用户取消时，会记录到 cancelledTimeouts 队列中。在每次指针转动的时候，时间轮都会清理该队列。</li><li>将缓存在 timeouts 队列中的定时任务转移到时间轮中对应的槽中。</li><li>根据当前指针定位对应槽，处理该槽位的双向链表中的定时任务。</li><li>检测时间轮的状态。如果时间轮处于运行状态，则循环执行上述步骤，不断执行定时任务。如果时间轮处于停止状态，则执行下面的步骤获取到未被执行的定时任务并加入 unprocessedTimeouts 队列：遍历时间轮中每个槽位，并调用 clearTimeouts() 方法；对 timeouts 队列中未被加入槽中循环调用 poll()。</li><li>最后再次清理 cancelledTimeouts 队列中用户主动取消的定时任务。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// Initialize the startTime.</span>           startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>startTime <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// We use 0 as an indicator for the uninitialized value here, so make sure it's not 0 when initialized.</span>               startTime <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">// Notify the other threads waiting for the initialization at start().</span>           startTimeInitialized<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> <span class="token function">waitForNextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>deadline <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token comment">//掩码， mask = wheel.length - 1，执行 ticks &amp; mask 便能定位到对应的时钟槽。</span>                   <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tick <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//清理用户主动取消的定时任务，这些定时任务在用户取消时，会记录到 cancelledTimeouts 队列中。在每次指针转动的时候，时间轮都会清理该队列。</span>                   <span class="token function">processCancelledTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">HashedWheelBucket</span> bucket <span class="token operator">=</span>                           wheel<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token comment">//将缓存在 timeouts 队列中的定时任务转移到时间轮中对应的槽中。</span>                   <span class="token function">transferTimeoutsToBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//根据当前指针定位对应槽，处理该槽位的双向链表中的定时任务。</span>                   bucket<span class="token punctuation">.</span><span class="token function">expireTimeouts</span><span class="token punctuation">(</span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>                   tick<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token comment">//时间轮处于运行状态</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">WORKER_STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">HashedWheelTimer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">WORKER_STATE_STARTED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// Fill the unprocessedTimeouts so we can return them from stop() method.</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashedWheelBucket</span> bucket <span class="token operator">:</span> wheel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">//获取到未被执行的定时任务并加入 unprocessedTimeouts 队列</span>               bucket<span class="token punctuation">.</span><span class="token function">clearTimeouts</span><span class="token punctuation">(</span>unprocessedTimeouts<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">HashedWheelTimeout</span> timeout <span class="token operator">=</span> timeouts<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">.</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   unprocessedTimeouts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//再次清理 cancelledTimeouts 队列中用户主动取消的定时任务。</span>           <span class="token function">processCancelledTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Dubbo-中如何使用定时任务"><a href="#Dubbo-中如何使用定时任务" class="headerlink" title="Dubbo 中如何使用定时任务"></a>Dubbo 中如何使用定时任务</h2><p>在 Dubbo 中，时间轮并不直接用于周期性操作，而是只向时间轮提交执行单次的定时任务，在上一次任务执行完成的时候，调用 newTimeout() 方法再次提交当前任务，这样就会在下个周期执行该任务。即使在任务执行过程中出现了 GC、I&#x2F;O 阻塞等情况，导致任务延迟或卡住，也不会有同样的任务源源不断地提交进来，导致任务堆积。</p><p>Dubbo 中对时间轮的应用主要体现在如下两个方面：</p><ul><li><strong>失败重试，</strong> 例如，Provider 向注册中心进行注册失败时的重试操作，或是 Consumer 向注册中心订阅时的失败重试等。</li><li><strong>周期性定时任务，</strong> 例如，定期发送心跳请求，请求超时的处理，或是网络连接断开后的重连机制。</li></ul><h4 id="举例：-注册失败，失败重试"><a href="#举例：-注册失败，失败重试" class="headerlink" title="举例： 注册失败，失败重试"></a>举例： 注册失败，失败重试</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>FailbackRegistry</span>#register <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">acceptable</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"URL "</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">" will not be registered to Registry. Registry "</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">" does not accept service of this protocol type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 完成本地文件缓存的初始化</span>        <span class="token comment">// 清理failedRegistered集合和failedUnregistered集合，并取消相关任务</span>        <span class="token function">removeFailedRegistered</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清理FailedRegisteredTask定时任务</span>        <span class="token function">removeFailedUnregistered</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清理FailedUnregisteredTask定时任务</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Sending a registration request to the server side</span>            <span class="token function">doRegister</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 与服务发现组件进行交互，具体由子类实现</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Throwable</span> t <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token comment">// If the startup detection is opened, the Exception is thrown directly.</span>            <span class="token comment">// 检测check参数，决定是否直接抛出异常</span>            <span class="token keyword">boolean</span> check <span class="token operator">=</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CHECK_KEY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CHECK_KEY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token constant">CONSUMER_PROTOCOL</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> skipFailback <span class="token operator">=</span> t <span class="token keyword">instanceof</span> <span class="token class-name">SkipFailbackWrapperException</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>check <span class="token operator">||</span> skipFailback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>skipFailback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    t <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Failed to register "</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">" to registry "</span> <span class="token operator">+</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", cause: "</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to register "</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">", waiting for retry, cause: "</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token comment">//这里重试</span>            <span class="token comment">// 如果不抛出异常，则创建失败重试的任务，并添加到failedRegistered集合中</span>            <span class="token function">addFailedRegistered</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addFailedRegistered</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">FailedRegisteredTask</span> oldOne <span class="token operator">=</span> failedRegistered<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldOne <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 已经存在重试任务，则无须创建，直接返回</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">FailedRegisteredTask</span> newTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FailedRegisteredTask</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oldOne <span class="token operator">=</span> failedRegistered<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> newTask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldOne <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果是新建的重试任务，则提交到时间轮中，等待retryPeriod毫秒后执行</span>        retryTimer<span class="token punctuation">.</span><span class="token function">newTimeout</span><span class="token punctuation">(</span>newTask<span class="token punctuation">,</span> retryPeriod<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dubbo时间轮&quot;&gt;&lt;a href=&quot;#Dubbo时间轮&quot; class=&quot;headerlink&quot; title=&quot;Dubbo时间轮&quot;&gt;&lt;/a&gt;Dubbo时间轮&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;时间轮是一种高效的、批量管理定时任务的调度模型&lt;/strong&gt;。时间轮一般</summary>
      
    
    
    
    <category term="java" scheme="https://colania.github.io/categories/java/"/>
    
    
    <category term="dubbo系列" scheme="https://colania.github.io/tags/dubbo%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>代码CR模板</title>
    <link href="https://colania.github.io/2023/04/02/dai-ma-cr-mo-ban/"/>
    <id>https://colania.github.io/2023/04/02/dai-ma-cr-mo-ban/</id>
    <published>2023-04-01T16:34:27.000Z</published>
    <updated>2023-04-01T16:36:20.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码CR模板"><a href="#代码CR模板" class="headerlink" title="代码CR模板"></a>代码CR模板</h1><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><ol><li><p>编码风格遵循阿里巴巴Java开发手册</p></li><li><p>大型复杂流程程序必须提供流程图、时序图</p><ol><li>被cr同学在cr开始需简单叙述项目大小及其背景，复杂流程需要cr实现逻辑是否match技术方案，减少实现跟技术方案的gap</li></ol></li><li><p>业务逻辑划分是否合理,是否耦合</p><ol><li>业务逻辑涉及领域的逻辑，明显或耦合的业务逻辑建议拆分</li></ol></li><li><p>代码编码逻辑是否清晰</p><ol><li>被cr同学需要讲清楚主干逻辑</li></ol></li><li><p>合理有效的注释</p><ol><li>逻辑复杂的代码或cr有疑问的逻辑,要求补充合理有效的注释</li></ol></li><li><p>是否存在冗余代码</p><ol><li>多余或者没有引用的代码建议删除</li></ol></li><li><p>是否存在潜在NPE</p><ol><li><blockquote><p>NPE是日常工作必出现的bug</p><p>上下文字段使用不判空，getXX()操作，基本类型拆箱，需要防御式判断或Optional</p></blockquote></li></ol></li><li><p>日志打印规范</p><ol><li><p>强制使用占位符进行日志打印，因为字符串拼接会使用 StringBuilder 的 append() 方式,有一定的性能损耗</p><blockquote><p>logger.info(“are u ok : oid 1”, oid);<br>logger.info(“are u ok : oid 1”, oid);</p></blockquote></li></ol></li><li><p>有没有maven依赖冲突</p><ul><li>很多时候诡异的运行时bug，往往由于依赖冲突导致，cr建议确认是否有pom变更</li></ul></li><li><p>资源释放</p><ul><li>无论是网络io还是文件io、资源释放的逻辑需要被cr到</li></ul></li><li><p>统一错误码</p><ul><li>禁止统一返回-1、500等错误码，最好定义枚举，方便追溯问题</li></ul></li><li><p>异常的处理</p><ul><li>出现异常的地方需要确认是否需要进行一下操作：直接返回、抛出异常、重试处理、恢复处理、熔断处理、降级处理、关闭业务</li></ul></li></ol><h2 id="初级篇"><a href="#初级篇" class="headerlink" title="初级篇"></a>初级篇</h2><ol><li>数据库索引设计是否合理、是否生效<ul><li>被cr同学要讲清楚设计索引的原因以及效果</li></ul></li><li>代码是否可以使用设计模式或者设计模式是否过度设计<ul><li>if&#x2F;else 过多或者场景分发类逻辑，建议采用策略模式</li><li>不建议小的需求、进行复杂的继承抽象逻辑，良好的设计是模型的合理</li><li>不建议引入复杂的框架解决简单问题，有些同学热衷于一个框架搞定所有架构(比如ddd cola)， 毕竟代码的历史性、复杂度框架是评估不了的、好的业务框架脚手架更倾向于用这种思想解决问题，而非照搬</li></ul></li><li>中间件使用是否最佳实践<ul><li>比如mq消费是否正确ack、还是需要重试、还是丢弃</li><li>比如redis是否存在大key设计、需要进行合理设计</li><li>比如es查询是否设置合理超时时间</li></ul></li><li>线程池使用、参数是否正确、是否业务隔离<ul><li>是否使用公司框架或jdk自带带参线程池构建方法</li><li>线程数、队列大小是否配置合理</li><li>多业务或调用方、是否配置隔离线程池</li></ul></li><li>如果使用锁，锁范围、粒度是否合适<ul><li>分布式锁的锁区间需要check是否影响其他</li></ul></li><li>事务处理：是否需要事务，事务是否生效<ul><li>持久化操作是否没有加事务</li><li>类内部调用是否导致事务没生效</li></ul></li></ol><h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ol><li>需要缓存的地方是否添加缓存<ul><li>比如依赖的外部接口性能差、添加合适的缓存解决查询问题</li></ul></li><li>乐观锁代替悲观锁</li><li>多接口聚合采用多线程加速</li></ol><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><h3 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h3><ol><li>基于状态的幂等<ul><li>基于状态，也就是是说调用该接口，会导致状态变化，如果状态已经发生变化，那么就直接返回<br>之前的结果即可</li></ul></li><li>基于某个key的幂等<ul><li>通常使用单独的字段来绑定或者日志表来记录，如果存在，直接返回</li></ul></li></ol><h3 id="重试"><a href="#重试" class="headerlink" title="重试"></a>重试</h3><ol><li>接口调用失败重试<ol><li>存在写操作的的外部接口建议不重试、让外部重新发起请求如果需要发起重试、</li><li>check提供的接口支持幂等返回</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代码CR模板&quot;&gt;&lt;a href=&quot;#代码CR模板&quot; class=&quot;headerlink&quot; title=&quot;代码CR模板&quot;&gt;&lt;/a&gt;代码CR模板&lt;/h1&gt;&lt;h2 id=&quot;基础篇&quot;&gt;&lt;a href=&quot;#基础篇&quot; class=&quot;headerlink&quot; title=&quot;基础篇</summary>
      
    
    
    
    <category term="工作心得" scheme="https://colania.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%BF%83%E5%BE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>技术方案模板</title>
    <link href="https://colania.github.io/2023/04/02/ji-zhu-fang-an-mo-ban/"/>
    <id>https://colania.github.io/2023/04/02/ji-zhu-fang-an-mo-ban/</id>
    <published>2023-04-01T16:34:18.000Z</published>
    <updated>2023-04-01T16:45:47.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术方案模板"><a href="#技术方案模板" class="headerlink" title="技术方案模板"></a>技术方案模板</h1><ul><li><p>一、需求背景</p><blockquote><p>讲一下需求背景、业务目标、业务流程、要解决的问题和方案、预估收益。</p></blockquote></li><li><p>二、功能框架</p></li><li><ul><li>2.1 功能框架</li></ul></li><li><blockquote><p>系统架构图</p></blockquote></li><li><ul><li>2.2 业务流程</li></ul></li><li><blockquote><p>数据流图</p></blockquote></li><li><ul><li>2.3 权限设计</li></ul></li><li><blockquote><p>是否涉及权限管理或者其他数据权限</p></blockquote></li><li><ul><li>2.4 系统交互</li></ul></li><li><blockquote><p>与其他业务系统或三方的交互</p></blockquote></li><li><p>三、需求拆解</p></li><li><ul><li>3.1 功能A</li></ul></li><li><ul><li><ul><li>3.1.1 生命周期</li><li>3.1.2 状态机</li><li>3.1.3 实现细节方案</li></ul></li></ul></li><li></li><li><p>四、技术方案</p></li><li><ul><li><p>4.1 外部依赖和业务模块设计</p></li><li><p>4.2 总体架构设计</p></li><li><p>4.3 总体流程设计</p></li><li><p>4.4 系统稳定性设计</p><blockquote><p>容错、扩容、监控、报警等信息</p></blockquote></li></ul></li><li><p>五、数据模型设计</p><blockquote><p>数据ER图</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;技术方案模板&quot;&gt;&lt;a href=&quot;#技术方案模板&quot; class=&quot;headerlink&quot; title=&quot;技术方案模板&quot;&gt;&lt;/a&gt;技术方案模板&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一、需求背景&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;讲一下需求背景、业务目标、业务流程、</summary>
      
    
    
    
    <category term="工作心得" scheme="https://colania.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%BF%83%E5%BE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>如何设计一个精壮的服务</title>
    <link href="https://colania.github.io/2023/04/01/ru-he-she-ji-yi-ge-jing-zhuang-de-fu-wu/"/>
    <id>https://colania.github.io/2023/04/01/ru-he-she-ji-yi-ge-jing-zhuang-de-fu-wu/</id>
    <published>2023-04-01T14:04:09.000Z</published>
    <updated>2023-04-01T16:26:01.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何设计一个精壮的服务"><a href="#如何设计一个精壮的服务" class="headerlink" title="如何设计一个精壮的服务"></a>如何设计一个精壮的服务</h1><p>最近辞职以后，在准备面试和简历期间，回顾了之前在工作期间出现的服务问题。有一些事故中，是因为某个或某几个服务被高峰期的流量打趴，可能是数据库问题，亦有可能是内存等等各种问题。其深层次的背后，是服务本身不够健壮，服务的某个或某几个节点被打趴以后，导致重试风暴，继而又导致雪崩的出现。如果这些服务是主流程上的服务的话，那就有可能导致全系统的雪崩。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230401221427201.png" alt="image-20230401221427201"></p><p>我们的很多服务在压力下的表现如上图所示，在到达最大负载之前还是可以正常提供服务的，但随着流量一旦突破服务所能承受的最大极限后，对外的服务能力急转直下，即使这时候流量没有过载了，甚至把流量完全降级为0，其服务能力也久久不能恢复。</p><p>甚至有的情况下好不容易等到服务能力恢复了，上层流量切回来以后，服务瞬间又被大量人工或自动的重试请求给打趴下了。</p><p> 如果我们的后台服务表现如此的“脆”，只要过载立刻就嘎嘣倒下，久久不爬起来，那我们的稳定性保障工作是没法做的。在大型的应用中，全链路有几千个服务，每个服务又有很多的节点。这种情况下，是很难保证，以及很难监控到所有的节点的稳定，系统不被流量打趴。这种情况也是做不到的。因为想不到的局部的异常是永远都会出现的。</p><p>因此，我们要整个应用做好健壮性，应用的每个服务都应该具备一定的健壮性。对于单个服务本身 (无论是单机还是分布式)，其实这个要求并不高，也不太难做到。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230401222233706.png" alt="image-20230401222233706"></p><p>我们要做到，一个“精壮”的服务，在压力下的表现应该如上图所示，当负载加大的时候输出线性提升，当外部负载超过服务理论能承受的最大负载后时，经过一个短暂的抖动后，不管外部负载有多高，服务都能稳定的对外输出，并且这个输出最好能比较贴近理论的最大负载。也就是说，一个“精壮”的服务即便在超负荷的情况下，也能够对外提供稳定输出的服务，<strong>超过处理能力的请求，应该果断的拒绝服务</strong>。</p><ul><li>一个服务的每个节点都需要有能够实时表征自己服务负载的指标，当指标超出服务能力上限的时候，拒绝超出服务能力的请求。</li><li>服务端要和客户端（这里的客户端不只是指APP，而是这个服务自己的客户端，一般来说是集成够知晓后端的负载情况，调整自己的策略。在另一个服务里的SDK，当然，也可能是APP里的SDK，下同）之间要有反馈机制，客户端要能知晓后端的负载情况，调整自己的策略。</li></ul><p>通俗来讲，对于每个服务的每个节点：1. 你得清楚自己现在忙不忙，是不是快到极限了。2. 你忙你得跟你的客户端说一声，别它不知道，一不小心把你给弄趴下了。。。</p><p>接下来展开讲一下这两点，如何找到表征自己服务负载的指标，以及如何在过载的时候和客户端协商。</p><h3 id="表征服务负载的指标"><a href="#表征服务负载的指标" class="headerlink" title="表征服务负载的指标"></a>表征服务负载的指标</h3><p>表征服务负载的指标，指的是当这一指标越过某个阈值的时候，该服务节点的服务能力会急剧恶化并久久不能恢复。</p><p>我们可以通过压测，去找到标准服务器环境下的较合理的QPS、TPS等值。然后通过限流、熔断等工具去进行峰值限制。但是可以根据实际情况，将限流峰值限制在一个区间内：</p><ol><li>只要这个服务节点是可以水平扩展的，就不需要太精确，不需要过度追求让服务压着CPU或其他资源极限跑，根据压测结果，设置一个不那么激进的值即可，可以通过混布甚至超售进一步压榨服务器资源利用率。</li><li>要考虑超时时间，否则就算处理完了请求也没用，客户端可能已经超时了，请求返回也只会被丢弃。</li><li>要考虑一些机器是否会运行其他功能的服务，比如说 机器监控工具、主备节点同步功能、心跳功能。因此，在阈值的设置上，要留有余地。更精细的服务甚至可以考虑请求分级，针对每个优先级设置不同的计数器。</li><li>有人可能会想这个计数器的阈值是不是搞成自适应的，即根据服务节点内部资源情况动态调整阈值大小，是不是更牛逼。说实话，绝大多数情况下，不需要搞成这样子，越简单越不容易出错，很少的情况下需要死扣单节点的性能，在如今机器爆炸的年代，服务稳定比机器更贵。</li></ol><h3 id="客户端与服务端的协同"><a href="#客户端与服务端的协同" class="headerlink" title="客户端与服务端的协同"></a>客户端与服务端的协同</h3><p>说实话我对客户端不是很了解，但是这个问题实际上还是后端繁忙情况下的重试逻辑的一个优化。</p><p>客户端的重试策略其实应该是一个很精细的逻辑，只不过特别容易被人忽略而已。一般的重试策略，大家很容易想到的都是简单的等间隔重试，周到一些的会考虑按照等比数列或者斐波那契数列等，逐步拉长间隔的重试。</p><p>但仔细去想，重试实际上是为了解决两类问题。一个是对网络丢包或瞬断的fail over，一个是对服务端节点故障的fail over。对于前者，重试间隔其实越小越好，最好是瞬时重试；但对于后者，这个间隔如果太小，很容易引起重试风暴，让后端节点死的更惨。然而，悲剧就在于，站在客户端的角度，我们其实区分不了到底发生的是哪种情况。</p><p>因此，最简单的解决办法是，当服务端的节点繁忙的时候，并不是简单的丢弃收到的请求，而是对于这些请求，都向客户端返回RET_BUSY。客户端一旦收到RET_BUSY，都应该跳出当前重试逻辑，直接拉长重试的间隔，避免造成重试风暴。更进一步的，服务端可以根据自己情况对返回值进行分级，例如RET_RETRY，让客户端立刻发起重试，RET_BUSY和RET_VERY_BUSY让客户端拉长到不同的重试周期。这里其实有非常多精细的玩法，能够解决很多复杂的问题，大家可以结合自己的工程场景实践一下。</p><p>到此为止，我们就讲完了如何做一个“精壮”的服务。本质上是用非常简单的工程方法，去实现能初步识别自我繁忙程度的服务端，和能够根据服务端繁忙程度自适应重试的客户端。从而做到不管外部请求压力有多大，都能提供可控输出。</p><p>在实际的工程实践中，要做到服务端节点，能够在被压到平均CPU利用率70%以上，瞬时CPU利用率超过90％的情况下，提供持续稳定的对外服务。在测试环境里能够做到在极限情况下的持续稳定输出。</p><h3 id="能不能做到服务无感实现的情况下上述健壮性"><a href="#能不能做到服务无感实现的情况下上述健壮性" class="headerlink" title="能不能做到服务无感实现的情况下上述健壮性"></a>能不能做到服务无感实现的情况下上述健壮性</h3><p>这套机制能不能通过外部监控，结合流量降级方案实现在外围，这样是不是就不需要动服务本身了？</p><p>首先，外部监控+流量降级方案，是无论如何一定要有的，它是一切的兜底方案。但是，监控是有<strong>滞后</strong>的，并且，<strong>流量降级是有损</strong>的，这导致降级需要谨慎。这些因素都决定了，外部监控+流量降级这套机制，是用来解决故障，而非让服务更加健壮的。服务的健壮性本身，要依赖服务自身来解决。</p><h3 id="哪些服务需要改造"><a href="#哪些服务需要改造" class="headerlink" title="哪些服务需要改造"></a>哪些服务需要改造</h3><p>上述这套机制是可以做进RPC框架里的，对于绝大多数要求没那么高的服务，也是足够用了。</p><p>分布式存储系统会更高要求性能问题。存储系统在稳定性上的工程难度确实是最复杂的，最基本的，存储节点不能通过简单重启来解决问题；并且资源消耗维度复杂，除了CPU外，还有内存以及page cache，网络吞吐和中断，磁盘iops和吞吐等诸多资源考量维度；更进一步的，流量降级以后通常只有存储系统是不能快速恢复服务的（例如，需要等待主从同步，需要等待minor或major compaction,需要等待刷盘等等），因此，在线存储系统的健壮性，需要考虑的因素通常是要更多的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何设计一个精壮的服务&quot;&gt;&lt;a href=&quot;#如何设计一个精壮的服务&quot; class=&quot;headerlink&quot; title=&quot;如何设计一个精壮的服务&quot;&gt;&lt;/a&gt;如何设计一个精壮的服务&lt;/h1&gt;&lt;p&gt;最近辞职以后，在准备面试和简历期间，回顾了之前在工作期间出现的服务问</summary>
      
    
    
    
    <category term="coding" scheme="https://colania.github.io/categories/coding/"/>
    
    
    <category term="稳定性建设" scheme="https://colania.github.io/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo-SPI解析</title>
    <link href="https://colania.github.io/2023/03/31/dubbo-spi-jie-xi/"/>
    <id>https://colania.github.io/2023/03/31/dubbo-spi-jie-xi/</id>
    <published>2023-03-31T05:40:43.000Z</published>
    <updated>2023-04-01T14:02:31.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dubbo-SPI-解析（Java-SPI解析）（上）"><a href="#Dubbo-SPI-解析（Java-SPI解析）（上）" class="headerlink" title="Dubbo SPI 解析（Java SPI解析）（上）"></a>Dubbo SPI 解析（Java SPI解析）（上）</h1><h2 id="SPI是什么"><a href="#SPI是什么" class="headerlink" title="SPI是什么"></a>SPI是什么</h2><p>SPI全称Service Provider Interface，是Java提供的一套用来被第三方实现或者扩展的API，它可以用来启用框架扩展和替换组件。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230331142758791.png" alt="image-20230331142758791"></p><p>Java SPI 实际上是“<strong>基于接口的编程＋策略模式＋配置文件</strong>”组合实现的动态加载机制。</p><p>系统设计的各个抽象，往往有很多不同的实现方案，在面向的对象的设计里，一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可拔插的原则，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候能不在程序里动态指明，这就需要一种服务发现机制。<br> Java SPI就是提供这样的一个机制：为某个接口寻找服务实现的机制。有点类似IOC的思想，就是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要。所以SPI的核心思想就是<strong>解耦</strong>。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>适用于：<strong>调用者根据实际使用需要，启用、扩展、或者替换框架的实现策略</strong></p><ul><li>数据库驱动JDBC加载不同类型数据库驱动</li><li>SL4J 加载不同日志实现</li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul><li>服务的提供者提供了一种接口的实现</li><li>在 Classpath 下的<code> META-INF/services/</code> 目录里创建一个以服务接口命名的文件，此文件记录了该 jar 包提供的服务接口的具体实现类</li><li>引入服务的应用通过<code>java.util.ServiceLoder</code>动态装载实现模块，它通过扫描<code>META-INF/services</code>目录下的配置文件找到实现类的全限定名，把类加载到JVM</li><li>SPI的实现类必须携带一个不带参数的构造方法；</li></ul><p>下面我们通过一个简单的示例演示下 JDK SPI 的基本使用方式：</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230331142950553.png" alt="image-20230331142950553"></p><p>首先我们需要创建一个 Log 接口，来模拟日志打印的功能：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyLog</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来提供两个实现—— Logback 和 Log4j，分别代表两个不同日志框架的实现，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLog4j</span> <span class="token keyword">implements</span> <span class="token class-name">MyLog</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"log4j: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogBack</span> <span class="token keyword">implements</span> <span class="token class-name">MyLog</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"logback: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在项目的 resources&#x2F;META-INF&#x2F;services 目录下添加一个名为<code> com.matt.MyLog</code> 的文件，这是 JDK SPI 需要读取的配置文件，具体内容如下：</p><pre class="line-numbers language-none"><code class="language-none">com.matt.impl.MyLog4jcom.matt.impl.MyLogBack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230331143206507.png" alt="image-20230331143206507"></p><p>最后创建 main() 方法，其中会加载上述配置文件，创建全部 MyLog 接口实现的实例，并执行其 log() 方法，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyLog</span><span class="token punctuation">></span></span> serviceLoader <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">MyLog</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MyLog</span> log<span class="token operator">:</span>serviceLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>执行结果：log4j<span class="token operator">:</span> hello worldlogback<span class="token operator">:</span> hello world<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><p>通过上述示例，我们可以看到 JDK SPI 的入口方法是 ServiceLoader.load() 方法，接下来我们就对其具体实现进行深入分析。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/Ciqc1F8o_V6AR93jAABeDIu_Kso211.png" alt="image"></p><p>在 reload() 方法中，首先会清理 providers 缓存（LinkedHashMap 类型的集合），该缓存用来记录 ServiceLoader 创建的实现对象，其中 Key 为实现类的完整类名，Value 为实现类的对象。之后创建 LazyIterator 迭代器，用于读取 SPI 配置文件并实例化实现类对象。</p><p>ServiceLoader.reload() 方法的实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 缓存，用来缓存 ServiceLoader创建的实现对象 </span><span class="token keyword">private</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">S</span><span class="token punctuation">></span></span> providers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        providers<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lookupIterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyIterator</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在前面的示例中，main() 方法中使用的迭代器底层就是调用了 <code>ServiceLoader.LazyIterator</code> 实现的。Iterator 接口有两个关键方法：<code>hasNext() </code>方法和 <code>next() </code>方法。这里的 LazyIterator 中的next() 方法最终调用的是其 nextService() 方法，hasNext() 方法最终调用的是 <code>hasNextService() </code>方法，调用关系如下图所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">LazyIterator</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">></span></span> service<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> loader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> service<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>loader <span class="token operator">=</span> loader<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>acc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">hasNextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">hasNextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">S</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>acc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">nextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">></span></span> action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token class-name">S</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">nextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看看<code>LazyIterator.hasNextService()</code>方法，该方法主要是<strong>负责查找 META-INF&#x2F;services 目录下的 SPI 配置文件</strong>，并进行遍历，大致实现如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PREFIX</span> <span class="token operator">=</span> <span class="token string">"META-INF/services/"</span><span class="token punctuation">;</span> <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">></span></span> configs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> pending <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token class-name">String</span> nextName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasNextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>configs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// PREFIX前缀与服务接口的名称拼接起来，就是META-INF目录下定义的SPI配 </span>    <span class="token comment">// 置文件(即示例中的META-INF/services/com.xxx.Log) </span>                    <span class="token class-name">String</span> fullName <span class="token operator">=</span> <span class="token constant">PREFIX</span> <span class="token operator">+</span> service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// 加载配置文件 </span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                        configs <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        configs <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">fail</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token string">"Error locating configuration files"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token comment">// 按行SPI遍历配置文件的内容</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pending <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>pending<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configs<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>              <span class="token comment">// 解析配置文件</span>                pending <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> configs<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            nextName <span class="token operator">=</span> pending<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>hasNextService()</code> 方法中完成 SPI 配置文件的解析之后，再来看<code>LazyIterator.nextService()</code>方法，该方法<strong>负责实例化 <code>hasNextService()</code> 方法读取到的实现类</strong>，其中会将实例化的对象放到 providers 集合中缓存起来，核心实现如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">S</span> <span class="token function">nextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> cn <span class="token operator">=</span> nextName<span class="token punctuation">;</span>    nextName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 加载 nextName字段指定的类 </span>        c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fail</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span>             <span class="token string">"Provider "</span> <span class="token operator">+</span> cn <span class="token operator">+</span> <span class="token string">" not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>service<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fail</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span>             <span class="token string">"Provider "</span> <span class="token operator">+</span> cn  <span class="token operator">+</span> <span class="token string">" not a subtype"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建实现类的对象 </span>        <span class="token class-name">S</span> p <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 将实现类名称以及相应实例对象添加到缓存 </span>        providers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cn<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fail</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span>             <span class="token string">"Provider "</span> <span class="token operator">+</span> cn <span class="token operator">+</span> <span class="token string">" could not be instantiated"</span><span class="token punctuation">,</span>             x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// This cannot happen</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是Java SPI的核心实现。</p><h2 id="Java-SPI-在JDBC的应用"><a href="#Java-SPI-在JDBC的应用" class="headerlink" title="Java SPI 在JDBC的应用"></a>Java SPI 在JDBC的应用</h2><p>JDK 中只定义了一个 java.sql.Driver 接口，具体的实现是由不同数据库厂商来提供的。这里我们就以 MySQL 提供的 JDBC 实现包为例进行分析。</p><p> 在 mysql-connector-java-*.jar 包中的 META-INF&#x2F;services 目录下，有一个 java.sql.Driver 文件中只有一行内容，如下所示：</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230401214849877.png" alt="image-20230401214849877"></p><p>在使用 mysql-connector-java-*.jar 包连接 MySQL 数据库的时候，我们会用到如下语句创建数据库连接：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:xxx://xxx:xxx/xxx"</span><span class="token punctuation">;</span> <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>DriverManager 是 JDK 提供的数据库驱动管理器</strong>，其中的静态代码块，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    <span class="token function">loadInitialDrivers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDBC DriverManager initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在调用 getConnection() 方法的时候，DriverManager 类会被 Java 虚拟机加载、解析并触发 static 代码块的执行。</p><p>在 loadInitialDrivers() 方法中通过 JDK SPI 扫描 Classpath 下 java.sql.Driver 接口实现类并实例化，核心实现如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadInitialDrivers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> drivers<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            drivers <span class="token operator">=</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jdbc.drivers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            drivers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// If the driver is packaged as a Service Provider, load it.</span>        <span class="token comment">// Get all the drivers through the classloader</span>        <span class="token comment">// exposed as a java.sql.Driver.class service.</span>        <span class="token comment">// ServiceLoader.load() replaces the sun.misc.Providers()</span>        <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 使用 JDK SPI机制加载所有 java.sql.Driver实现类 </span>                <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Driver</span><span class="token punctuation">></span></span> loadedDrivers <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Driver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Driver</span><span class="token punctuation">></span></span> driversIterator <span class="token operator">=</span> loadedDrivers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/* Load these drivers, so that they can be instantiated.                 * It may be the case that the driver class may not be there                 * i.e. there may be a packaged driver with the service class                 * as implementation of java.sql.Driver but the actual class                 * may be missing. In that case a java.util.ServiceConfigurationError                 * will be thrown at runtime by the VM trying to locate                 * and load the service.                 *                 * Adding a try catch block to catch those runtime errors                 * if driver not available in classpath but it's                 * packaged as service and that service is there in classpath.                 */</span>                <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>driversIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        driversIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// Do nothing</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DriverManager.initialize: jdbc.drivers = "</span> <span class="token operator">+</span> drivers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>drivers <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> drivers<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> driversList <span class="token operator">=</span> drivers<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number of Drivers:"</span> <span class="token operator">+</span> driversList<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 初始化Driver实现类 </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> aDriver <span class="token operator">:</span> driversList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DriverManager.Initialize: loading "</span> <span class="token operator">+</span> aDriver<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>aDriver<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DriverManager.Initialize: load failed: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用Java SPI机制的优势是实现解耦，使得第三方服务模块的装配控制的逻辑与调用者的业务代码分离，而不是耦合在一起。应用程序可以根据实际业务情况启用框架扩展或替换框架组件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dubbo-SPI-解析（Java-SPI解析）（上）&quot;&gt;&lt;a href=&quot;#Dubbo-SPI-解析（Java-SPI解析）（上）&quot; class=&quot;headerlink&quot; title=&quot;Dubbo SPI 解析（Java SPI解析）（上）&quot;&gt;&lt;/a&gt;Dubbo</summary>
      
    
    
    
    <category term="java" scheme="https://colania.github.io/categories/java/"/>
    
    
    <category term="dubbo系列" scheme="https://colania.github.io/tags/dubbo%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>自行更换Macbook Pro A1708电池</title>
    <link href="https://colania.github.io/2023/03/31/zi-xing-geng-huan-macbookproa1708-dian-chi/"/>
    <id>https://colania.github.io/2023/03/31/zi-xing-geng-huan-macbookproa1708-dian-chi/</id>
    <published>2023-03-31T02:56:05.000Z</published>
    <updated>2023-03-31T03:10:00.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>本来想去实体店换的，去了以后说要键盘和电池要一起换，太贵了。而且换电池要小半个月。作为日常的主力机，经不住这么久的耗时。还是自己去某宝买电池，自己换吧。总体来说还是相对容易的。</p><p>这个安装本来是从网上找到的，后来又找了一下，没找到相关文档了。。。现在发出来，方便后续再看。</p><p>网上找了一下 MacBook Pro (A1708) 换电池的视频，大多是引导把触摸板拆掉再铲电池，有的甚至是要把主板拆掉再铲电池，可能是考虑到电池底部的胶条实在太难铲除，担心下铲的时候把 触摸板FPC 或者其他元件碰坏所以才做进一步拆除，我是在基本没有拆除其他附件的情况情况下单换了电池。</p><h3 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h3><blockquote><p>拆开后盖-&gt;解下触摸板接口-&gt;拆除电池控制板-&gt;铲除电池底部胶条-&gt;拆除原电池-&gt;安放新电池-&gt;接上电池控制板-&gt;安装触摸板接口-&gt;安装后盖。</p></blockquote><p>初次拆这款机器可能的难点应该在打开后盖、铲除电池底部胶条这两步，要特别小心的是拆除电池控制板的FPC，毕竟FPC很细接口卡扣又非常小，详细步骤和要点记录如下。</p><h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><h3 id="1-拆开后盖"><a href="#1-拆开后盖" class="headerlink" title="1. 拆开后盖"></a>1. 拆开后盖</h3><p>初次拆这款机器可能第一个难关就是打开后盖，后盖有6颗螺丝，两两一组，用的是统一号梅花螺丝刀，对应的位置和螺丝的形状如下图。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988108353-ef1e1c97-18d4-470d-9f92-3b2d047900f4.png" alt="img"></p><p>6颗螺丝取下来之后，保存好，小心掉了。用拨片（或者银行卡这种小卡片更容易塞进去）从后方边撬开背面板，再以此将背板左右两侧的卡口打开，再稍用力向后抽出背板。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988108719-5b8ab353-5f89-4fcf-a654-bd6de1f6a744.png" alt="image.png"></p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988107795-3a663c47-1bd5-42c9-81f5-8b155672e6bd.png" alt="image.png"></p><p>不出意外的话后盖就顺利打开了，接下来要取下触摸板接口上的排线，再来拆解电池控制板。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988116599-7bd244f3-09b7-4073-9bab-bad988e60653.png" alt="img"></p><h3 id="2-解下触摸板接口"><a href="#2-解下触摸板接口" class="headerlink" title="2. 解下触摸板接口"></a>2. 解下触摸板接口</h3><p>取下触摸板接口上的螺丝和压扣之后可以轻松取下排线。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988117552-4892924d-243f-4976-a4c3-76a7e1e0d415.png" alt="img"></p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988117665-39633b5b-41da-4987-aedf-47ee507e6f6e.png" alt="image.png"></p><p>揭开上图中电池电源板上条形胶纸，露出电池的控制板，建议从做往右揭开条形胶纸，右边不小心容易把排线拔下来。</p><h3 id="3-拆除电池控制板连接"><a href="#3-拆除电池控制板连接" class="headerlink" title="3.  拆除电池控制板连接"></a>3.  拆除电池控制板连接</h3><p>拆除胶条纸之后，看到的排线就是电池与主板的连接线了。排线左右两端均有小插头和卡扣，要把小卡扣掰成竖直状态再将排线从插头中拔出来，后续装排线的时候先插进去再小卡扣掰下去卡住。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988122442-5bdcae78-f4fe-4f5f-943f-50ce8a616014.png" alt="image.png"></p><p>取下主板与电池连接的排线之后，取下控制板上的3颗螺丝，中间那颗螺丝上有白色的纸片，应该是用来判断是否拆过电池的，无视或者取下就好。</p><p>搞定之后要开始重头戏，拆电芯了……</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988123521-0eac6eab-c653-4cb4-910a-f6f4be39ea3b.png" alt="image.png"></p><h3 id="4-铲除电池底部胶条"><a href="#4-铲除电池底部胶条" class="headerlink" title="4. 铲除电池底部胶条"></a>4. 铲除电池底部胶条</h3><p>原厂电池三块电芯的底部是用胶条粘在机器上的，胶条的粘性非常的好，三块电芯建议先铲两侧的，熟练了之后再来铲中间的。最好用电吹风热一下胶条，会容易撕一点。。。还记得第一次拆iPhone电池的时候硬掰，结果电池着火了。。。</p><p>先用铲子的一个胶切进去，根据胶条的位置顶进去，只要铲子顶进去开了小口，再不断扭动就很容易铲下来了。</p><p>铲中间电芯的时候要特别注意，从左右两侧空余量比较多的一侧入手，结合胶条的位置参照两侧的铲法入手横着铲，千万要避开下方触摸板的排线，一个不小弄坏排线就亏了……</p><p>把3颗电芯底部的胶条都铲开后很轻松的就可以取下旧电池。</p><h3 id="5-安装新电池"><a href="#5-安装新电池" class="headerlink" title="5.  安装新电池"></a>5.  安装新电池</h3><p>装电池就很容易了，后续就没图了，很简单。</p><p>排线左右两侧的卡扣一定要按拆的顺序反向操作，排线插入插座必须足够长，否则后续回认不到电池。安装好电池后可以尝试开机测试，能找到电池没问题了再压实电池再往后装回后盖。</p><h3 id="6-从后往前依次装回"><a href="#6-从后往前依次装回" class="headerlink" title="6. 从后往前依次装回"></a>6. 从后往前依次装回</h3><p>装回触摸板排线，反向操作安装回后盖。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本流程&quot;&gt;&lt;a href=&quot;#基本流程&quot; class=&quot;headerlink&quot; title=&quot;基本流程&quot;&gt;&lt;/a&gt;基本流程&lt;/h2&gt;&lt;p&gt;本来想去实体店换的，去了以后说要键盘和电池要一起换，太贵了。而且换电池要小半个月。作为日常的主力机，经不住这么久的耗时。还是</summary>
      
    
    
    
    <category term="搞机" scheme="https://colania.github.io/categories/%E6%90%9E%E6%9C%BA/"/>
    
    
    <category term="维修" scheme="https://colania.github.io/tags/%E7%BB%B4%E4%BF%AE/"/>
    
  </entry>
  
  <entry>
    <title>colima</title>
    <link href="https://colania.github.io/2023/03/29/colima/"/>
    <id>https://colania.github.io/2023/03/29/colima/</id>
    <published>2023-03-29T08:51:47.000Z</published>
    <updated>2023-03-29T08:54:24.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Colima"><a href="#Docker-Colima" class="headerlink" title="Docker Colima"></a>Docker Colima</h1><p> 在mac 上，要运行docker ，需要通过docker desktop 创建docker运行的环境，但是这玩意太重了，风扇总是飞起。于是找到了一个代替docker desktop的轻量级工具，缺点是没有可视化界面。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/abiosoft/colima">Colima</a> 是一个以最小化设置来在MacOS上运行容器运行时和 Kubernetes 的工具。</p><p>Colima 的名字取自 Container on Lima。<a href="https://github.com/lima-vm/lima">Lima</a> 是一个虚拟机工具，可以实现自动的文件共享、端口转发以及 containerd。</p><p>Colima 实际上是通过 Lima 启动了名为 colima 的虚拟机，使用虚拟机中的 containerd 作为容器运行时。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Colima 的使用很简单，执行下面的命令就可以创建虚拟机，默认是 Docker 的运行时。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">colima start<span class="token constant">INFO</span><span class="token punctuation">[</span><span class="token number">0000</span><span class="token punctuation">]</span> starting colima<span class="token constant">INFO</span><span class="token punctuation">[</span><span class="token number">0000</span><span class="token punctuation">]</span> creating and starting <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                     context<span class="token operator">=</span>vm<span class="token constant">INFO</span><span class="token punctuation">[</span><span class="token number">0119</span><span class="token punctuation">]</span> provisioning <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                              context<span class="token operator">=</span>docker<span class="token constant">INFO</span><span class="token punctuation">[</span><span class="token number">0119</span><span class="token punctuation">]</span> provisioning in <span class="token constant">VM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        context<span class="token operator">=</span>docker<span class="token constant">INFO</span><span class="token punctuation">[</span><span class="token number">0133</span><span class="token punctuation">]</span> restarting <span class="token constant">VM</span> <span class="token keyword">to</span> <span class="token namespace">complete</span> setup <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>           context<span class="token operator">=</span>docker<span class="token constant">INFO</span><span class="token punctuation">[</span><span class="token number">0133</span><span class="token punctuation">]</span> stopping <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                  context<span class="token operator">=</span>vm<span class="token constant">INFO</span><span class="token punctuation">[</span><span class="token number">0136</span><span class="token punctuation">]</span> starting <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                  context<span class="token operator">=</span>vm<span class="token constant">INFO</span><span class="token punctuation">[</span><span class="token number">0158</span><span class="token punctuation">]</span> starting <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                  context<span class="token operator">=</span>docker<span class="token constant">INFO</span><span class="token punctuation">[</span><span class="token number">0159</span><span class="token punctuation">]</span> done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，在宿主机上就可以使用 Docker 相关的命令了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">docker ps<span class="token constant">CONTAINER</span> <span class="token constant">ID</span>   <span class="token constant">IMAGE</span>     <span class="token constant">COMMAND</span>   <span class="token constant">CREATED</span>   <span class="token constant">STATUS</span>    <span class="token constant">PORTS</span>     <span class="token constant">NAMES</span>docker pull busyboxdocker images<span class="token constant">REPOSITORY</span>   <span class="token constant">TAG</span>       <span class="token constant">IMAGE</span> <span class="token constant">ID</span>       <span class="token constant">CREATED</span>       <span class="token constant">SIZE</span>busybox      latest    b34806a1af7a   <span class="token number">2</span> weeks ago   <span class="token number">1.41</span><span class="token constant">MB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用 Lima 的命令行 limact工具查看虚拟机的情况</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">limactl list<span class="token constant">NAME</span>      <span class="token constant">STATUS</span>     <span class="token constant">SSH</span>                <span class="token constant">ARCH</span>       <span class="token constant">CPUS</span>    <span class="token constant">MEMORY</span>    <span class="token constant">DISK</span>     <span class="token constant">DIR</span>colima    <span class="token class-name">Running</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">64505</span>    aarch64    <span class="token number">2</span>       <span class="token number">2</span>GiB      <span class="token number">60</span>GiB    <span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>addo<span class="token operator">/</span><span class="token punctuation">.</span>lima<span class="token operator">/</span>colima<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h2><p>Colima 启动的虚拟机默认是 2CPU、2GiB 内存 和 60GiB 存储。可以在创建时通过 –cpu 、–memory 和 –disk 来分配更多资源。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">colima start <span class="token operator">--</span>cpu <span class="token number">4</span> <span class="token operator">--</span>memory <span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以修改当前虚拟机的配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">colima stopcolima start <span class="token operator">--</span>cpu <span class="token number">4</span> <span class="token operator">--</span>memory <span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然colima除了docker也是支持containerd的</p><p>在此之前先删除原来生成的虚拟机</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">colima stopcolima delete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后创建新的虚拟机</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">colima start <span class="token operator">--</span>runtime containerd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建完成之后查看容器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">colima nerdctl ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者运行一个容器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">colima nerdctl container run nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>除了containerd colima还支持创建k8s</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">colima start <span class="token operator">--</span><span class="token keyword">with</span><span class="token operator">-</span>kubernetes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>支持自定义虚拟机大小</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">colima start <span class="token operator">--</span>cpu <span class="token number">4</span> <span class="token operator">--</span>memory <span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-Colima&quot;&gt;&lt;a href=&quot;#Docker-Colima&quot; class=&quot;headerlink&quot; title=&quot;Docker Colima&quot;&gt;&lt;/a&gt;Docker Colima&lt;/h1&gt;&lt;p&gt; 在mac 上，要运行docker ，需要通过doc</summary>
      
    
    
    
    <category term="coding" scheme="https://colania.github.io/categories/coding/"/>
    
    
    <category term="tools" scheme="https://colania.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>MAT(Java堆分析工具)使用方式</title>
    <link href="https://colania.github.io/2023/03/29/mat-java-dui-fen-xi-gong-ju-shi-yong-fang-shi/"/>
    <id>https://colania.github.io/2023/03/29/mat-java-dui-fen-xi-gong-ju-shi-yong-fang-shi/</id>
    <published>2023-03-29T07:11:29.000Z</published>
    <updated>2023-03-29T08:52:46.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MAT-Java堆分析工具-使用方式"><a href="#MAT-Java堆分析工具-使用方式" class="headerlink" title="MAT(Java堆分析工具)使用方式"></a>MAT(Java堆分析工具)使用方式</h1><p>最近在整理笔记，发现之前在分析JAVA内存问题时写的Mat工具文档还是蛮清晰的，现重新整理一下，分享出来。</p><h2 id="MAT是个啥"><a href="#MAT是个啥" class="headerlink" title="MAT是个啥"></a>MAT是个啥</h2><p>MAT 全称 <code>Eclipse Memory Analysis Tools</code> 是一个分析 Java堆数据的专业工具，可以计算出内存中对象的实例数量、占用空间大小、引用关系等，看看是谁阻止了垃圾收集器的回收工作，从而定位内存泄漏的原因。</p><h2 id="什么时候会用到"><a href="#什么时候会用到" class="headerlink" title="什么时候会用到"></a>什么时候会用到</h2><ul><li>OutOfMemoryError的时候，触发full gc，但空间却回收不了，引发内存泄露</li><li>java服务器系统异常，比如load飙高，io异常，或者线程死锁等，都可能通过分析堆中的内存对象来定位原因</li></ul><h2 id="怎么安装"><a href="#怎么安装" class="headerlink" title="怎么安装"></a>怎么安装</h2><p><a href="https://www.eclipse.org/mat/downloads.php">MAT最新下载版本</a></p><p><a href="https://www.eclipse.org/mat/previousReleases.php">MAT历史版本</a></p><p>比较重要的是MAT的版本是和JAVA版本有关的，如果下载的话，需要考虑是否支持本地的 JAVA 版本 。</p><p>我用的是MAC  Intel 版本，所以下载的是 <code>MemoryAnalyzer-1.12.0.20210602-macosx.cocoa.x86_64</code> 。当前最新的 <code>Memory Analyzer 1.14.0 Release</code> 需要Java 17+。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230329152800939.png" alt="image-20230329152800939"></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>首先，MAT是用来分析JAVA堆数据的专业工具，那如何才能获取到JAVA堆数据呢。</p><h3 id="分析文件生成方式"><a href="#分析文件生成方式" class="headerlink" title="分析文件生成方式"></a>分析文件生成方式</h3><ol><li>自动生成，jvm启动参数里添加下面配置，当发生OutOfMemoryError时，虚拟机会自动dump内存快照</li></ol><pre class="line-numbers language-none"><code class="language-none">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath&#x3D;$LOG_DIR&#x2F;java.hprof&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>手动生成，通过执行jdk自带命令</li></ol><pre class="line-numbers language-none"><code class="language-none">jmap -dump:format&#x3D;b,file&#x3D;heap.bin  &lt;pid&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>Arthas heapdump命令</li></ol><pre class="line-numbers language-none"><code class="language-none">heapdump xxxxxx.hprof<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下就可以用 MAT打开转换后的.hprof文件</p><p><strong><span style='color:red'>（！我这里只是介绍使用方式，并不是arthas有问题，这个dump文件只是随手生成的一份）</span></strong></p><h3 id="使用MAT"><a href="#使用MAT" class="headerlink" title="使用MAT"></a>使用MAT</h3><p>打开后的首页，里面是一些堆的基本概要信息，比如空间大小、类的数量、对象实例数量、类加载器等等</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230329153514976.png" alt="image-20230329153514976"></p><h2 id="MAT功能"><a href="#MAT功能" class="headerlink" title="MAT功能"></a>MAT功能</h2><p>MAT的核心功能有三类：</p><ul><li>Actions：<ul><li><strong>Histogram 列出每个类所对应的对象个数，以及所占用的内存大小；</strong></li><li><strong>Dominator Tree 以占用总内存的百分比的方式来列举出所有的实例对象，注意这个地方是直接列举出的对应的对象而不是类，这个视图是用来发现大内存对象的</strong></li><li>Top Consumers：按照类和包分组的方式展示出占用内存最大的一个对象</li><li>Duplicate Classes：检测由多个类加载器所加载的类信息（用来查找重复的类）</li></ul></li><li>Reports：<ul><li><strong>Leak Suspects：通过MAT自动分析当前内存泄露的主要原因</strong></li><li>Top Components：Top组件，列出大于总堆1%的组件的报告</li></ul></li><li>Step By Step：<ul><li>Component Report：组件报告,分析属于公共根包或类加载器的对象；</li></ul></li></ul><p>下面列举一些会用到的功能。</p><h3 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h3><p>列出每个类所对应的对象个数，以及所占用的内存大小。</p><p>选中一个ClassName单击后，通过左上角Inspector可以看到当前类的回收情况，内存地址，等</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230329154124926.png" alt="image-20230329154124926"></p><h3 id="Dominator-Tree"><a href="#Dominator-Tree" class="headerlink" title="Dominator Tree"></a>Dominator Tree</h3><p>以占用总内存的百分比的方式来列举出所有的实例对象，注意这个地方是直接列举出的对应的对象而不是类，这个视图是用来发现大内存对象的</p><ul><li><p>通过<code>Dominator Tree</code> 可以轻松看到那些对象占据了大量堆空间，也就可以断定，当前问题出自于哪个对象。</p></li><li><p>再根据该对象的生成方式，去判断出问题的代码在哪里。</p></li></ul><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230329154234980.png" alt="image-20230329154234980"></p><p>由上图可看到<code>com.taobao.arthas.core.server.ArthasBootstrap @ 0x7ba601258</code>占用了32.97%的内存</p><p><strong>那么当我们需要查看，当前该ArthasBootstrap @ 0x7ba601258对象都引用了那些数据，以及当前该对象是被那几个对象所引用的，如何查看？</strong></p><p>在当前所要查看的对象右键，点击List Objects可以看到分别提供了：<code>with outgoing references（查看当前该对象的所有的引用信息）</code> 和 <code>with incoming references（查看当前该对象是被那几个对象所引用的）</code> ；</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230329154846899.png" alt="image-20230329154846899"></p><p>快速找出某个实例没被释放的原因，可以右健 Path to GC Roots–&gt;exclude all phantom&#x2F;weak&#x2F;soft etc. references</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230329155941552.png" alt="image-20230329155941552"></p><h3 id="Leak-Suspects"><a href="#Leak-Suspects" class="headerlink" title="Leak Suspects"></a>Leak Suspects</h3><p>通过MAT自动分析当前内存问题的主要原因</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230329154945313.png" alt="image-20230329154945313"></p><p>可以看到，当前给出的主要原因是：<code>**com.taobao.arthas.core.server.ArthasBootstrap**</code> 实例占据<strong>8,392,160 (32.97%)</strong> bytes ， 是由<code> **com.taobao.arthas.agent.ArthasClassloader @ 0x7ba556870**</code>加载的。</p><p>还给出了关键字：</p><p><strong>Keywords</strong></p><ul><li>com.taobao.arthas.core.server.ArthasBootstrap</li><li>com.taobao.arthas.agent.ArthasClassloader @ 0x7ba556870</li><li>com.taobao.arthas.core.shell.term.impl.http.api.HttpApiHandler</li></ul><p>点击detail的话，会有更详细的内容</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230329155356140.png" alt="image-20230329155356140"></p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230329155424428.png" alt="image-20230329155424428"></p><h3 id="Thread-Overview"><a href="#Thread-Overview" class="headerlink" title="Thread_Overview"></a>Thread_Overview</h3><p>用来查看当前进程dump时的所有线程的堆栈信息，通过分析下面所对应的堆栈信息，可以很快速的定位到对应的线程所执行的方法等层级关系，以此来定位对应的异常问题；</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230329155550728.png" alt="image-20230329155550728"></p><h3 id="Heap-Dump-Overview"><a href="#Heap-Dump-Overview" class="headerlink" title="Heap Dump Overview"></a>Heap Dump Overview</h3><p>查看全局的内存占用信息</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230329155637605.png" alt="image-20230329155637605"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MAT-Java堆分析工具-使用方式&quot;&gt;&lt;a href=&quot;#MAT-Java堆分析工具-使用方式&quot; class=&quot;headerlink&quot; title=&quot;MAT(Java堆分析工具)使用方式&quot;&gt;&lt;/a&gt;MAT(Java堆分析工具)使用方式&lt;/h1&gt;&lt;p&gt;最近在整理笔</summary>
      
    
    
    
    <category term="coding" scheme="https://colania.github.io/categories/coding/"/>
    
    
    <category term="tools" scheme="https://colania.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>如何高效开会</title>
    <link href="https://colania.github.io/2023/03/24/ru-he-gao-xiao-kai-hui/"/>
    <id>https://colania.github.io/2023/03/24/ru-he-gao-xiao-kai-hui/</id>
    <published>2023-03-24T13:59:43.000Z</published>
    <updated>2023-03-24T14:34:23.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何高效开会"><a href="#如何高效开会" class="headerlink" title="如何高效开会"></a>如何高效开会</h1><p>从毕业到现在，已经工作将近5年了，在这段期间也经历过大大小小的各种会议，有很多简明扼要直入主题的会议，也有不少浑浑噩噩，听半天不知道会议主题、自己的定位的会议。比如说以下这些会议：  </p><ol><li>开会前5-10分钟或者会议进行的过程中才被通知要参加会议，但是我们连这个会是干什么的，都有谁参加，讨论什么内容都不清楚，然后就被硬生生拉到一个会上。</li><li>莫名收到一个XX时间XX主题的会邀，会邀中没有会议议程说明，没有主持人来跟我做前置沟通，没有会议涉及的文档，根本无法判断我能做什么、对我来说有什么用的一个会。</li><li>你是会议主持人的角色，这个会议原本预计1个小时内结束的，但是中途参会人A和B由于某些分歧一直争执不下，持续发散讨论，最后不光会议超时了，也没有实质性进展。</li><li>参会人的角色不同，所关注的点也不一样。作为一名开发人员，我会关注逻辑能不能实现；而产品经理会关注这个需求价值是什么，成本有多大。讲了半天，可能你还没搞懂逻辑以及能否实现，这个需求已经拍板了。这种后续又会带来无限的扯皮。</li></ol><p>我相信大家多多少少都遇到过以上这几种情况，除了这些其实还有很多情况。当我遇到这种情况的时候，很多时候其实首先随之而来的感受是会带来情绪上的不爽，然后接下来才是理性来看这个会到底要我干嘛。这种经历次数多了，我觉得该把“我们到底该如何开会”这样的一些思考和方法拿出来分享和讨论，与大家共勉。希望我们能一起提高会议效率，开有必要的高质量的会。  </p><p>我们可以从写作的方法的要素来探讨如何提高会议效率。<br><strong>“是什么”</strong> , <strong>“为什么”</strong> , <strong>“这么做”</strong></p><h2 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1. 是什么"></a>1. 是什么</h2><p>开会解决的这个“问题”到底是什么，相应的弄明白会议目的到底是什么。<br>因为，一个没有达成目的的会议，即使时间再短，也是失败的。所以，开会前请先弄明白你开这个会的目的到底是啥，这个是指引你如何组织这场会议才会更成功的引子。不同目的、不同参会人，开会的形式可能也有有所不同，达成目的的方法就算是好方法。</p><h2 id="2-为什么"><a href="#2-为什么" class="headerlink" title="2. 为什么"></a>2. 为什么</h2><p>开会是要解决问题的，要不然干嘛浪费大家的时间来开会。<br>你就要先弄明白你的问题是什么，这个问题是否除了开会还有其他方式可以解决？如果你走过去喊下相关的几个人拉一块十句话能对清楚的，就没必要兴师动众开一个正式会议呀。所以先想明白这个会是必须要开的吗？<br>这个会议要解决的问题值不值得这么多人一起参与，为什么要涉及到这些部门和人员。当你想清楚这个问题，那么会议也已经很明确了。</p><h2 id="3-怎么做"><a href="#3-怎么做" class="headerlink" title="3. 怎么做"></a>3. 怎么做</h2><p>要考虑清楚这些事项：  </p><ol><li>会议目标</li><li>参与会议部门和人员 </li><li>用什么样的形式在什么地点开</li></ol><p>这里用一个checklist当做开会流程，一项一项去检查自己是否都已经做好了。</p><pre class="line-numbers language-none"><code class="language-none">1. 会前  a. 确定会议主题和目标    ⅰ. 本次会议要讨论什么内容？    ⅱ. 会议结束要达成什么目标？  b. 识别相关方    ⅰ. 识别出来本次会议涉及哪些权力利益相关方，包括参会人都有哪些部门哪些角色哪些人（相关方宁多不少，要不然很容易要二次沟通）  c. 提前进行前置沟通    ⅰ. 提前拉群前置沟通本次会议核心概要和需要前置沟通讨论的问题（关键相关方也可以单独沟通），以便提升会上效率。  d. 提前发出会议资料供大家阅读。  e. 提前确认大家均可参会时间（可以看完大家闲忙日历提供选项供大家选择）。  f. 发出会议邀请    ⅰ. 邀请到人（执行人、决策人，至少确保关键角色都能到场）。    ⅱ. 最好至少提前一天发出会邀book大家时间。    ⅲ. 会邀内容包括：会议主题、议程、资料、时间、地点，可以强调下各相关方需要关注什么。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">2. 会中  a. 会前10分钟准备    ⅰ. 提前5-10分钟到达会议地点。    ⅱ. 再次群内提醒大家会议时间、地点。    ⅲ. 若有同学到点还没参会，尽快1V1请求回执、电话等，最晚会议开始时间5分钟后开启会议。  b. 会中沟通保持聚焦会议主题    ⅰ. 宣讲会议背景、目标、沟通流程—言简意赅    ⅱ. 沟通讨论会议内容（重点)——控场，紧扣主题不偏离。      1. 这部分主持人一定要控场（包括控制讨论方向和时间节奏），控制问题无限制发散，主持讨论流程，一直要紧扣会议主题，关注效率，直至最终形成结论。      2. 若会议过程有分歧僵持不下或者本次会议有限时间内讨论不清楚的点，可以记to do，然后跳到下一个问题，如果是最后僵持不下，则可以到时间适时结束会议，并确认分歧留下to do再约会议讨论（这部分如果只是其中少数相关方间的问题，可以会议结束后单独继续沟通）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">3. 会后  a. 发出会议纪要    ⅰ. 注意，会议纪要不是你会后发了文字就行的，一定要确保你发的会议纪要是有执行性和可跟踪性的，而不仅仅是做模糊描述，要不然做了跟没做没啥太大区别。内容一定要包括会议结论（形成的共识）、to do(待确认点及接下来的action）并确认优先级、对应到责任人和deadline，最好邮件发出，起码要保证群内通知，同时@到相关人。  b. 跟踪todo进度    ⅰ. 根据todo的节点和责任人，进行相应处理进度追踪，完成后及时同步大家，到时间没完成的需要再催促，再次制定delay的时间点继续追踪。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，不一定所有问题都要通过开会解决，任何适用你的高效率的方法都是好方法，开无意义的会就像连百度百科都不愿意点一下就来随口问问题的行为一样令人不舒服。知易行难，共勉～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何高效开会&quot;&gt;&lt;a href=&quot;#如何高效开会&quot; class=&quot;headerlink&quot; title=&quot;如何高效开会&quot;&gt;&lt;/a&gt;如何高效开会&lt;/h1&gt;&lt;p&gt;从毕业到现在，已经工作将近5年了，在这段期间也经历过大大小小的各种会议，有很多简明扼要直入主题的会议，也有不</summary>
      
    
    
    
    <category term="工作心得" scheme="https://colania.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%BF%83%E5%BE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>散列算法</title>
    <link href="https://colania.github.io/2023/03/24/san-lie-suan-fa/"/>
    <id>https://colania.github.io/2023/03/24/san-lie-suan-fa/</id>
    <published>2023-03-24T13:19:58.000Z</published>
    <updated>2023-03-27T11:24:54.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h1><p>散列（Hash）也称为哈希，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，这个输出值就是散列值。 </p><h1 id="散列算法"><a href="#散列算法" class="headerlink" title="散列算法"></a>散列算法</h1><p>在实际使用中，不同的输入可能会散列成相同的输出，这时也就产生了冲突。 这时候，我们就希望有一些算法可以保证散列表的足够散列程度，降低冲突几率。</p><p>散列算法的宗旨就是：构造冲突较低的散列地址，保证散列表中数据的离散度。</p><h2 id="除法散列法"><a href="#除法散列法" class="headerlink" title="除法散列法"></a>除法散列法</h2><p>散列长度 m, 对于一个小于 m 的数 p 取模，所得结果为散列地址。对 p 的选择很重要，一般取素数或 m</p><pre class="line-numbers language-none"><code class="language-none">f(k) &#x3D; k % p （p&lt;&#x3D;m）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为求模数其实是通过一个除法运算得到的，所以叫“除法散列法”</p><h2 id="平方散列法（平方取中法）"><a href="#平方散列法（平方取中法）" class="headerlink" title="平方散列法（平方取中法）"></a>平方散列法（平方取中法）</h2><p>先通过求关键字的平方值扩大相近数的差别，然后根据表长度取中间的几位数作为散列函数值。又因为一个乘积的中间几位数和乘数的每一位都相关，所以由此产生的散列地址较为均匀。</p><pre class="line-numbers language-none"><code class="language-none">公式：f(k) &#x3D; ((k * k) &gt;&gt; X) &lt;&lt; Y对于常见的32位整数而言，也就是 f(k) &#x3D; (k * k) &gt;&gt; 28<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="随机数法"><a href="#随机数法" class="headerlink" title="随机数法"></a>随机数法</h2><p>选择一随机函数，取关键字的随机值作为散列地址，通常用于关键字长度不同的场合。</p><pre class="line-numbers language-none"><code class="language-none">公式：f(k) &#x3D; random(k)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="斐波那契（Fibonacci）散列法"><a href="#斐波那契（Fibonacci）散列法" class="headerlink" title="斐波那契（Fibonacci）散列法"></a>斐波那契（Fibonacci）散列法</h2><p>当我们查看 ThreadLocal 执行设置元素时，有这么一段计算哈希值的代码；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">HASH_INCREMENT</span> <span class="token operator">=</span> <span class="token number">0x61c88647</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nextHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> nextHashCode<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token constant">HASH_INCREMENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ThreadLocal 使用的就是 斐波那契（Fibonacci）散列法 + 开放寻址法存储数据到数组结构中。之所以使用斐波那契数列，是为了让数据更加散列，减少哈希碰撞。具体来自数学公式的计算求值。<br>公式：</p><pre class="line-numbers language-none"><code class="language-none">f(k) &#x3D; ((k * 2654435769) &gt;&gt; X) &lt;&lt; Y对于常见的32位整数而言，也就是 f(k) &#x3D; (k * 2654435769) &gt;&gt; 28<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><p>通过数据对散列程度进行比对</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;散列&quot;&gt;&lt;a href=&quot;#散列&quot; class=&quot;headerlink&quot; title=&quot;散列&quot;&gt;&lt;/a&gt;散列&lt;/h1&gt;&lt;p&gt;散列（Hash）也称为哈希，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，这个输出值就是散列值。 &lt;/p&gt;
&lt;h1 id=&quot;散列</summary>
      
    
    
    
    <category term="coding" scheme="https://colania.github.io/categories/coding/"/>
    
    
  </entry>
  
  <entry>
    <title>红米AX5路由器开启ssh+uu加速器插件</title>
    <link href="https://colania.github.io/2023/03/23/hong-mi-ax5-lu-you-qi-kai-qi-ssh-uu-jia-su-qi-cha-jian/"/>
    <id>https://colania.github.io/2023/03/23/hong-mi-ax5-lu-you-qi-kai-qi-ssh-uu-jia-su-qi-cha-jian/</id>
    <published>2023-03-23T06:41:07.000Z</published>
    <updated>2023-03-24T13:02:29.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redmi-AX5-ssh-开启-uu加速器插件"><a href="#redmi-AX5-ssh-开启-uu加速器插件" class="headerlink" title="redmi AX5 ssh 开启 +uu加速器插件"></a>redmi AX5 ssh 开启 +uu加速器插件</h1><p>这个教程将会指导你如何解锁红米 AX5、小米 AX1800 SSH，并安装 ShellClash 插件，用 Clash 实现科学上网。 </p><p>红米 AX5 和小米 AX1800 可以基本看成一个产品，配置基本相同，外观设计不同。CPU都是：高通 IPQ6000，高通四核1.2GHz。在性能上和小米 AX3600 或者说红米 AX6 差距很大，不是非常推荐购买 AX5 更不推荐购买 AX1800。 </p><h2 id="1-降级路由器"><a href="#1-降级路由器" class="headerlink" title="1.降级路由器"></a>1.降级路由器</h2><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/202303231447059.png" alt="降级">  </p><p>使用这里提供的降级固件，在后台常用设置-系统状态里-手动选择下载好的固件，降级后再解锁 SSH。降级后第一次进入后台配置的时候请选择不自动更新，或者手机小米Wi-Fi App 里关闭系统更新。（目前的系统虽然不是最新的也能够 Mesh 不影响使用，等等吧第三方的 openwrt 已经在路上了）</p><ul><li><a href="https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/rm1800/miwifi_rm1800_firmware_fafda_1.0.336.bin">小米 AX1800 1.0.336 下载</a></li><li><a href="https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/ra67/miwifi_ra67_all_f3fac_1.0.26.bin">红米 AX5 1.0.26 下载</a></li></ul><h2 id="2-获取-SSH-权限"><a href="#2-获取-SSH-权限" class="headerlink" title="2. 获取 SSH 权限"></a>2. 获取 SSH 权限</h2><h3 id="2-1-获取后台-STOK"><a href="#2-1-获取后台-STOK" class="headerlink" title="2.1 获取后台 STOK"></a>2.1 获取后台 STOK</h3><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988410122-86297696-ed90-404d-8e51-bb29e7dc374a.png" alt="image.png"></p><p>登陆小米路由器后台后，浏览器地址栏 stok&#x3D; 后面的一段内容即是（选中部分），准备好备用。</p><h3 id="2-2-获取-SSH"><a href="#2-2-获取-SSH" class="headerlink" title="2.2 获取 SSH"></a>2.2 获取 SSH</h3><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.31.1&#x2F;cgi-bin&#x2F;luci&#x2F;;stok&#x3D;[stok]&#x2F;api&#x2F;misystem&#x2F;set_config_iotdev?bssid&#x3D;Xiaomi&amp;user_id&#x3D;longdike&amp;ssid&#x3D;-h%3B%20nvram%20set%20ssh_en%3D1%3B%20nvram%20commit%3B%20sed%20-i%20&#39;s%2Fchannel%3D.*%2Fchannel%3D%5C%22debug%5C%22%2Fg&#39;%20%2Fetc%2Finit.d%2Fdropbear%3B%20%2Fetc%2Finit.d%2Fdropbear%20start%3B <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 <STOK> 替换为上一步的值，替换完成后复制到浏览器打开。</p><h3 id="2-3-修改默认-SSH-密码为-admin"><a href="#2-3-修改默认-SSH-密码为-admin" class="headerlink" title="2.3 修改默认 SSH 密码为 admin"></a>2.3 修改默认 SSH 密码为 admin</h3><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.31.1&#x2F;cgi-bin&#x2F;luci&#x2F;;stok&#x3D;[stok]&#x2F;api&#x2F;misystem&#x2F;set_config_iotdev?bssid&#x3D;Xiaomi&amp;user_id&#x3D;longdike&amp;ssid&#x3D;-h%3B%20echo%20-e%20&#39;admin%5Cnadmin&#39;%20%7C%20passwd%20root%3B <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 <STOK> 替换为上上一步的值，替换完成后复制到浏览器打开。</p><h3 id="2-4-连接-SSH"><a href="#2-4-连接-SSH" class="headerlink" title="2.4 连接 SSH"></a>2.4 连接 SSH</h3><p>现在应该可以通过 ssh 连接到 小米 AX1800、红米 AX5 了，终端里执行（密码是 admin，输入不会显示，输入完回车就行）</p><pre class="line-numbers language-none"><code class="language-none">ssh root@192.168.31.1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果提示这种错误 (没有就可以忽略，第一次让你按 yes 即可)</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988418513-42b42fb5-e34e-4dd7-a5fe-5bdb906a1615.png" alt="image.png"></p><p>你可以删除这个文件的指定行，我这里后面可以看到是 45，或者直接删除这个文件。</p><pre class="line-numbers language-none"><code class="language-none">rm -rf ~&#x2F;.ssh&#x2F;known_hosts <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装使用-ShellClash"><a href="#安装使用-ShellClash" class="headerlink" title="安装使用 ShellClash"></a>安装使用 ShellClash</h2><p>SSH 连接上小米 AX1800、红米 AX5 执行安装</p><pre class="line-numbers language-none"><code class="language-none">sh -c &quot;$(curl -kfsSl https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;juewuy&#x2F;ShellClash@master&#x2F;install.sh)&quot; &amp;&amp; source &#x2F;etc&#x2F;profile &amp;&gt; &#x2F;dev&#x2F;null <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988410725-f5251f65-8f47-446b-bcd6-277e2c278658.png" alt="image.png"></p><p>选择 1 安装到 &#x2F;etc，然后再选择 1 确认安装。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988412091-f566af57-2b60-4e6a-980a-28ac6ea5ab4b.png" alt="img"></p><p>安装好就能使用 clash 命令了 ，输入 clash 就能进入配置。这里选择 4 让局域网设备都能走代理（如果你清楚别的可以自行选择）。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988417281-c79ec77f-cdb1-49ed-b6ad-512a38dd4ecb.png" alt="img"></p><p>推荐选择不代理 UDP 也就是 1，然后安装 DashBoard 面板也就能网页直接控制了也就是 1 。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988430529-eaa96afe-98fa-4830-ac23-4864780c5850.png" alt="img"></p><p>推荐选择 Yacd 面板，界面很好看 选择 2，然后安装目录选择 1 即可。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988433681-212a8a5d-46c2-4577-a4b5-9b44c556ee88.png" alt="img"></p><p>1 选择导入配置文件。如果你没有 Clash 的配置文件而是 v2ray、ss、trojan 的订阅链接（你的机场会提供），你可以再选择 1 进行「在线生成 Clash 配置文件」；如果有的话可以选择 2 直接导入配置文件。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988435684-db6b45e7-eb1e-434a-9977-05df0766056e.png" alt="img"></p><p>然后粘贴上你的订阅链接（url 链接），再选择 1 开始生成配置文件。生成配置文件后按 0 返回上层菜单即可。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988437454-8a61ef8b-3c01-4629-9c02-13eb08180991.png" alt="img"></p><p>再按 1 选择立即开启 Clash 的服务即可。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988436375-fa1bfb6e-bc3b-423e-a4c9-1609ea01bb0b.png" alt="img"></p><p>启动后你可以通过 <a href="http://192.168.31.1:9999/ui%EF%BC%8C%E8%BF%9B%E8%A1%8C%E8%8A%82%E7%82%B9%E7%9A%84%E5%88%87%E6%8D%A2%E5%92%8C%E8%A7%84%E5%88%99%E7%9A%84%E9%80%89%E6%8B%A9%E3%80%82%E5%BD%93%E7%84%B6%E4%BD%A0%E5%86%8D%E6%8C%89">http://192.168.31.1:9999/ui，进行节点的切换和规则的选择。当然你再按</a> 4 选择开机启动也可以。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988437829-156951fe-438c-4920-9534-9f09225a1b17.png" alt="img"></p><p>这个时候应该就能科学上网了速度也应该还可以。</p><pre class="line-numbers language-none"><code class="language-none">后续进入以后如果clash 命令不能执行，需要先执行以下source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="UU加速器插件"><a href="#UU加速器插件" class="headerlink" title="UU加速器插件"></a>UU加速器插件</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ol><li>已经刷好开发版本路由器固件</li><li>能启用ssh连接</li><li>下载网易uu主机加速app</li></ol><h3 id="在app上点击安装路由器插件"><a href="#在app上点击安装路由器插件" class="headerlink" title="在app上点击安装路由器插件"></a>在app上点击安装路由器插件</h3><p>这个时候会提示路由器设备不支持。不过没关系，因为我们已经支持ssh访问了，用ssh方式安装。</p><h4 id="1-通过SSH进入路由器内部"><a href="#1-通过SSH进入路由器内部" class="headerlink" title="1. 通过SSH进入路由器内部"></a>1. 通过SSH进入路由器内部</h4><pre class="line-numbers language-none"><code class="language-none">sh root@192.168.31.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/1665988511569-ce00a7d3-b025-4a95-9ed2-322799537822.png" alt="image.png"></p><h4 id="2-运行UU路由器插件安装指令"><a href="#2-运行UU路由器插件安装指令" class="headerlink" title="2. 运行UU路由器插件安装指令"></a>2. 运行UU路由器插件安装指令</h4><p>这里直接详见<a href="https://uu.163.com/router/direction.html">uu加速器中的<strong>OpenWrt</strong>安装方法</a></p><p>其中 opkg update 步骤可能失败。不用关心，别的步骤能成功就行</p><h4 id="第三步：主机加速-App"><a href="#第三步：主机加速-App" class="headerlink" title="第三步：主机加速 App"></a>第三步：主机加速 App</h4><p>打开App并登录后，手机会把我的AX5认为是OpenWrt路由器的网络，点击下一步操作即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;redmi-AX5-ssh-开启-uu加速器插件&quot;&gt;&lt;a href=&quot;#redmi-AX5-ssh-开启-uu加速器插件&quot; class=&quot;headerlink&quot; title=&quot;redmi AX5 ssh 开启 +uu加速器插件&quot;&gt;&lt;/a&gt;redmi AX5 ssh</summary>
      
    
    
    
    <category term="搞机" scheme="https://colania.github.io/categories/%E6%90%9E%E6%9C%BA/"/>
    
    
    <category term="科学上网" scheme="https://colania.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://colania.github.io/2023/03/18/hello-world/"/>
    <id>https://colania.github.io/2023/03/18/hello-world/</id>
    <published>2023-03-18T03:38:29.587Z</published>
    <updated>2023-03-18T03:45:01.660Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="java" scheme="https://colania.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>ConcurrentHashMap 源码分析</title>
    <link href="https://colania.github.io/2023/03/18/concurrenthashmap-yuan-ma-fen-xi/"/>
    <id>https://colania.github.io/2023/03/18/concurrenthashmap-yuan-ma-fen-xi/</id>
    <published>2023-03-18T03:29:10.000Z</published>
    <updated>2023-03-22T10:31:00.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ConcurrentHashMap类图"><a href="#ConcurrentHashMap类图" class="headerlink" title="ConcurrentHashMap类图"></a>ConcurrentHashMap类图</h2><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230321163458604.png" alt="image-20230321163458604"></p><p>根据类图看出来，ConcurrentHashMap实现了 Map 接口，继承了 AbstractMap 抽象类，所以大多数的方法也都和我们平时用到的HashMap是相同的，HashMap 有的方法，ConcurrentHashMap 几乎都有，所以当我们需要从 HashMap 切换到 ConcurrentHashMap 时，无需关心两者之间的兼容问题。</p><h2 id="ConcurrentHashMap几个重要概念"><a href="#ConcurrentHashMap几个重要概念" class="headerlink" title="ConcurrentHashMap几个重要概念"></a><strong>ConcurrentHashMap几个重要概念</strong></h2><h3 id="重要参数"><a href="#重要参数" class="headerlink" title="重要参数"></a>重要参数</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//最大容量是1&lt;&lt;30 ,即2^30.int类型是32位整型,但是java中存放的是补码，2^31=-2147483648，考虑到扩容的情况下，选择2^30. </span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token comment">//链表长度达到8就转成红黑树，当长度降到6就转成普通链表。时间和空间的权衡</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">UNTREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_TREEIFY_CAPACITY</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MOVED</span>     <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 表示正在转移</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TREEBIN</span>   <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 表示已经转换成树</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">RESERVED</span>  <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// hash for transient reservations</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">HASH_BITS</span> <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span> <span class="token comment">// usable bits of normal node hash</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span><span class="token comment">//默认没初始化的数组，用来保存元素</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTable<span class="token punctuation">;</span><span class="token comment">//转移的时候用的数组</span><span class="token comment">/*** 用来控制表初始化和扩容的，默认值为0，当在初始化的时候指定了大小，这会将这个大小保存在sizeCtl中，大小为* 数组的0.75* 当为负的时候，说明表正在初始化或扩张，*     -1表示初始化*     -(1+n) n:表示活动的扩张线程*/</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> sizeCtl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重要结构"><a href="#重要结构" class="headerlink" title="重要结构"></a>重要结构</h3><ol><li>Node&lt;K,V&gt;,这是构成每个元素的基本类。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> <span class="token class-name">V</span> val<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>  <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>TreeNode构造树的节点</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> parent<span class="token punctuation">;</span>  <span class="token comment">// red-black tree links</span>        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> left<span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> right<span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> prev<span class="token punctuation">;</span>    <span class="token comment">// needed to unlink next upon deletion</span>        <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">,</span>                 <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> <span class="token class-name">V</span> val<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>TreeBin 不保存用户键或值，而是指向 TreeNode 及其根的列表，由TreeBin完成对红黑树的包装。他们还维护一个读写锁。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> root<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> first<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> waiter<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> <span class="token keyword">int</span> lockState<span class="token punctuation">;</span>        <span class="token comment">// values for lockState</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">WRITER</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// set while holding write lock</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">WAITER</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// set when waiting for write lock</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">READER</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// increment value for setting read lock</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重要锁"><a href="#重要锁" class="headerlink" title="重要锁"></a>重要锁</h3><ol><li><strong>Unsafe CAS</strong></li></ol><p>在ConcurrentHashMap中，随处可见**<big>U.compareAndSwapObject</big><strong>等类似的方法。这个算法的基本思想就是不断地去比较当前内存中的变量值与你指定的一个变量值是否相等，如果相等，则接受你指定的修改的值，否则拒绝你的操作。与我们常见的</strong>乐观锁**类似。</p><blockquote><p>Unsafe是位于sun.misc包下的一个类，主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升Java运行效率、增强Java语言底层资源操作能力方面起到了很大的作用。但由于Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获得在i位置上的Node节点</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">tabAt</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> <span class="token constant">ASHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ABASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//利用CAS算法设置i位置上的Node节点。之所以能实现并发是因为他指定了原来这个节点的值是多少</span><span class="token comment">//在CAS算法中，会比较内存中的值与你指定的这个值是否相等，如果相等才接受你的修改，否则拒绝你的修改</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">boolean</span> <span class="token function">casTabAt</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> c<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> <span class="token constant">ASHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ABASE</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//利用volatile方法设置节点位置的值</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">setTabAt</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">putObjectVolatile</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> <span class="token constant">ASHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ABASE</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>synchronized</p><p><em>synchronized</em>是Java中的关键字，是一种同步锁.</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//存放新值时会进行加锁</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>                    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法拆解"><a href="#方法拆解" class="headerlink" title="方法拆解"></a>方法拆解</h2><h3 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1. 构造方法"></a>1. 构造方法</h3><p>​在任何一个构造方法中，都没有对存储Map元素Node的table变量进行初始化。而是在第一次put操作的时候在进行初始化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果在实例化对象的时候指定了容量，则初始化sizeCtl</span><span class="token keyword">public</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> cap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>initialCapacity <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span>             <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span>             <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sizeCtl <span class="token operator">=</span> cap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//当存入一个Map的时候，先设定sizeCtl为默认容量，在添加元素</span><span class="token keyword">public</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sizeCtl <span class="token operator">=</span> <span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">;</span>  <span class="token function">putAll</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 初始化数组table，* 如果sizeCtl小于0，说明别的数组正在进行初始化，则让出执行权* 如果sizeCtl大于0的话，则初始化一个大小为sizeCtl的数组* 否则的话初始化一个默认大小(16)的数组* 然后设置sizeCtl的值为数组长度的3/4*/</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>  <span class="token comment">//第一次put的时候，table还没被初始化，进入while</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//sizeCtl初始值为0，当小于0的时候表示在别的线程在初始化表或扩展表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>           <span class="token comment">// 断片</span>      <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//SIZECTL：表示当前对象的内存偏移量，sc表示期望值，-1表示要替换的值，设定为-1表示要初始化表了</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//指定了大小的时候就创建指定大小的Node数组，否则创建指定大小(16)的Node数组</span>          <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> <span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">;</span>                  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>          <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>          table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>          <span class="token comment">//n>>>2 代表n向右移动2位，即n/4</span>          sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//初始化后，sizeCtl长度为数组长度的3/4</span>        sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> tab<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-PUT"><a href="#2-PUT" class="headerlink" title="2. PUT"></a>2. PUT</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  单调用putVal方法，并且putVal的第三个参数设置为false*  当设置为false的时候表示这个value一定会设置*  true的时候，只有当这个key的value为空的时候才会设置*/</span><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 当添加一对键值对的时候，首先会去判断保存这些键值对的数组是不是初始化了，* 如果没有的话就初始化数组*  然后通过计算hash值来确定放在数组的哪个位置* 如果这个位置为空则直接添加，如果不为空的话，则取出这个节点来* 如果取出来的节点的hash值是MOVED(-1)的话，则表示当前正在对这个数组进行扩容，复制到新的数组，则当前线程也去帮助复制* 最后一种情况就是，如果这个节点，不为空，也不在扩容，则通过synchronized来加锁，进行添加操作*    然后判断当前取出的节点位置存放的是链表还是树*    如果是链表的话，则遍历整个链表，直到取出来的节点的key来个要放的key进行比较，如果key相等，并且key的hash值也相等的话，*          则说明是同一个key，则覆盖掉value，否则的话则添加到链表的末尾*    如果是树的话，则调用putTreeVal方法把这个元素添加到树中去*  最后在添加完成之后，会判断在该节点处共有多少个节点（注意是添加前的个数），如果达到8个以上了的话，*  则调用treeifyBin方法来尝试将处的链表转为树，或者扩容数组*/</span><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//K,V都不能为空，否则的话跑出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>          <span class="token comment">//判断容器是否初始化，如果容器没有初始化，则调用 initTable 方法初始化，初始化一个node数组。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//根据hash找到数组对应的下标位置，如果该位置未存放节点，也就是说不存在 hash 冲突，则使用 CAS 无锁的方式将数据添加到容器中，并且结束循环。</span>          <span class="token comment">// tabAt(tab, i = (n - 1) &amp; hash)可以判断将要插入的位置是否已经有元素</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                             <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token comment">// no lock when adding to empty bin</span>            <span class="token punctuation">&#125;</span><span class="token comment">//如果检测到某个节点的hash值是MOVED，则表示正在进行数组扩张的数据复制阶段，</span>          <span class="token comment">//则当前线程也会参与去复制，通过允许多线程复制的功能，一次来减少数组的复制所带来的性能损失</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>                tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//如果在这个位置有元素的话，就采用synchronized的方式加锁，</span>                 <span class="token comment">//如果是链表的话(hash大于0)，就对这个链表的所有元素进行遍历，</span>                 <span class="token comment">//如果找到了key和key的hash值都一样的节点，则把它的值替换到</span>                 <span class="token comment">//如果没找到的话，则添加在链表的最后面</span>                 <span class="token comment">//否则，是树的话，则调用putTreeVal方法添加到树中去</span>                 <span class="token comment">//在添加完之后，会对该节点上关联的的数目进行判断，</span>                 <span class="token comment">//如果在8个以上的话，则会调用treeifyBin方法，来尝试转化为树，或者是扩容</span>                <span class="token class-name">V</span> oldVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">//这个位置有元素的话</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token comment">//取出来的元素的hash值大于0，当转换为树之后，hash值为-2</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token class-name">K</span> ek<span class="token punctuation">;</span>                              <span class="token comment">//要存的元素的hash，key跟要存储的位置的节点的相同的时候，替换掉该节点的value即可</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                                    <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                                     <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                        e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>                              <span class="token comment">//如果不是同样的hash，同样的key的时候，则判断该节点的下一个节点是否为空,为空的话把这个要加入的节点设置为当前节点的下一个节点</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                              value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                      <span class="token comment">//已经转化成红黑树类型了</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span>                            binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                          <span class="token comment">//调用putTreeVal方法，将该元素添加到树中去</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                           value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                    p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">//当在同一个节点的数目达到8个的时候，则扩张数组或将给节点的数据转为tree</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> <span class="token constant">TREEIFY_THRESHOLD</span><span class="token punctuation">)</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>  <span class="token comment">//计数</span>        <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-ConcurrentHashMap的扩容详解"><a href="#3-ConcurrentHashMap的扩容详解" class="headerlink" title="3. ConcurrentHashMap的扩容详解"></a>3. ConcurrentHashMap的扩容详解</h3><ul><li>在同一个节点的个数超过8个的时候，会调用treeifyBin方法来看看是扩容还是转化为一棵树</li><li>同时在每次添加完元素的addCount方法中，也会判断当前数组中的元素是否达到了sizeCtl的量，如果达到了的话，则会进入transfer方法去扩容</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//当数组长度小于64的时候，扩张数组长度一倍，否则的话把链表转为树</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">treeifyBin</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> b<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> sc<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MIN_TREEIFY_CAPACITY</span><span class="token punctuation">)</span>              <span class="token comment">//数组扩容</span>                <span class="token function">tryPresize</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>hash <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//生成TreeNode后填充到TreeBin,头结点仍然放在相同的位置，锁住链表的头结点位置，对后续的节点生成TreeNode生成树</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> hd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> tl <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> b<span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p <span class="token operator">=</span>                                <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> e<span class="token punctuation">.</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span>val<span class="token punctuation">,</span>                                                  <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> tl<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                hd <span class="token operator">=</span> p<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                tl<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                            tl <span class="token operator">=</span> p<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在tryPresize方法中，并没有加锁，允许多个线程进入，如果数组正在扩张，则当前线程也去帮助扩容。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">tryPresize</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//找到比输入大的，并且与输入相邻的2的次方数,否则就是MAXIMUM_CAPACITY</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span>            <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token punctuation">(</span>size <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sc<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>          <span class="token comment">//这里是putAll方法直接put一个map的话，在putALl方法中没有调用initTable方法去初始化table，而是直接调用了tryPresize方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> c<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> tab<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                            table <span class="token operator">=</span> nt<span class="token punctuation">;</span>                            sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                        sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token comment">//一直扩容到的c小于等于sizeCtl或者数组长度大于最大长度的时候，则退出</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> sc <span class="token operator">||</span> n <span class="token operator">>=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> table<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//扩容戳。保障当前扩容范围唯一性，高16位表示扩容标记，低16位表示当前扩容数量</span>                <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//如果sizeCtl&lt;0表示当前有线程正在正在扩容，则帮助扩容；否则的话，开始新的扩容</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt<span class="token punctuation">;</span>                  <span class="token comment">//迁移完了，break</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">>>></span> <span class="token constant">RESIZE_STAMP_SHIFT</span><span class="token punctuation">)</span> <span class="token operator">!=</span> rs <span class="token operator">||</span> sc <span class="token operator">==</span> rs <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">||</span>                        sc <span class="token operator">==</span> rs <span class="token operator">+</span> <span class="token constant">MAX_RESIZERS</span> <span class="token operator">||</span> <span class="token punctuation">(</span>nt <span class="token operator">=</span> nextTable<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>                        transferIndex <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                  <span class="token comment">//transfer的线程数加一,该线程将进行transfer的帮忙</span>                      <span class="token comment">//sc表示在transfer工作的线程数</span>                  <span class="token comment">//保证所有线程完成了迁移动作，才能表示扩容完成。</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> sc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token function">transfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> nt<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>              <span class="token comment">//第一次扩容走这里，开始全新的扩容</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span>                                             <span class="token punctuation">(</span>rs <span class="token operator">&lt;&lt;</span> <span class="token constant">RESIZE_STAMP_SHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token function">transfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//找到比输入大的，并且与输入相邻的2的次方数</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Integer.numberOfLeadingZeros(n)用于计算n转换成二进制后前面有几个0</span><span class="token comment">//(1 &lt;&lt; (RESIZE_STAMP_BITS - 1)即是1&lt;&lt;15，表示为二进制即是高16位为0，低16位为1</span><span class="token comment">//resizeStamp(n)的返回值为：高16位置0，第16位为1，低15位存放当前容量n，用于表示是对n的扩容</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">numberOfLeadingZeros</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token constant">RESIZE_STAMP_BITS</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩容操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">     <span class="token comment">// 把数组中的节点复制到新的数组的相同位置，或者移动到扩张部分的相同位置</span>     <span class="token comment">// 在这里首先会计算一个步长，表示一个线程处理的数组长度，用来控制对CPU的使用，</span>     <span class="token comment">// 每个CPU最少处理16个长度的数组元素,也就是说，如果一个数组的长度只有16，那只有一个线程会对其进行扩容的复制移动操作</span>     <span class="token comment">// 扩容的时候会一直遍历，知道复制完所有节点，没处理一个节点的时候会在链表的头部设置一个fwd节点，这样其他线程就会跳过他，</span><span class="token comment">// 实现数据的转移</span><span class="token comment">// 红黑树：迁移后不满足红黑树条件，转链表</span><span class="token comment">// 链表： 高低位迁移</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTab<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">,</span> stride<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stride <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">NCPU</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">NCPU</span> <span class="token operator">:</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MIN_TRANSFER_STRIDE</span><span class="token punctuation">)</span>            stride <span class="token operator">=</span> <span class="token constant">MIN_TRANSFER_STRIDE</span><span class="token punctuation">;</span> <span class="token comment">// subdivide range</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// initiating</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                nextTab <span class="token operator">=</span> nt<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// try to cope with OOME</span>                sizeCtl <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            nextTable <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>            transferIndex <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> nextn <span class="token operator">=</span> nextTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token comment">//用来表示已经迁移完的节点，如果数组的某个节点迁移完了，需要更改成fwd</span>        <span class="token class-name">ForwardingNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> fwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForwardingNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>nextTab<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> finishing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// to ensure sweep before committing nextTab</span><span class="token comment">//  通过for自循环处理每个槽位中的链表元素，默认advace为真，通过CAS设置transferIndex属性值，并初始化i和bound值，i指当前处理的槽位序号，bound指需要处理的槽位边界，先处理槽位15的节点；</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> fh<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>advance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> nextIndex<span class="token punctuation">,</span> nextBound<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">>=</span> bound <span class="token operator">||</span> finishing<span class="token punctuation">)</span>                    advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nextIndex <span class="token operator">=</span> transferIndex<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span>compareAndSwapInt                         <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">TRANSFERINDEX</span><span class="token punctuation">,</span> nextIndex<span class="token punctuation">,</span>                          nextBound <span class="token operator">=</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">></span> stride <span class="token operator">?</span>                                       nextIndex <span class="token operator">-</span> stride <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    bound <span class="token operator">=</span> nextBound<span class="token punctuation">;</span>                    i <span class="token operator">=</span> nextIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                    advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> n <span class="token operator">||</span> i <span class="token operator">+</span> n <span class="token operator">>=</span> nextn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> sc<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>finishing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    nextTable <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    table <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>                    sizeCtl <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">,</span> sc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">RESIZE_STAMP_SHIFT</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    finishing <span class="token operator">=</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    i <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// recheck before commit</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token comment">//没有节点，则通过CAS插入在第二步中初始化的ForwardingNode节点，告诉其它线程该槽位已经处理过了</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                advance <span class="token operator">=</span> <span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//如果被处理过了，另外一个线程处理到这个节点时，取到该节点的hash值应该为MOVED，值为-1，则直接跳过，继续处理下一个槽位节点；</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>                advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// already processed</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> ln<span class="token punctuation">,</span> hn<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                          <span class="token comment">//使用fn&amp;n可以快速把链表中的元素区分成两类，A类是hash值的第X位为0，B类是hash值的第X位为1，并通过lastRun记录最后需要处理的节点.</span>                            <span class="token keyword">int</span> runBit <span class="token operator">=</span> fh <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>                            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> lastRun <span class="token operator">=</span> f<span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">int</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> runBit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    runBit <span class="token operator">=</span> b<span class="token punctuation">;</span>                                    lastRun <span class="token operator">=</span> p<span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>runBit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                ln <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                                hn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                hn <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                                ln <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p <span class="token operator">=</span> f<span class="token punctuation">;</span> p <span class="token operator">!=</span> lastRun<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">int</span> ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">;</span> <span class="token class-name">K</span> pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">;</span> <span class="token class-name">V</span> pv <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                                    ln <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    hn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                            advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>f<span class="token punctuation">;</span>                            <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> lo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                            <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> hi <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                            <span class="token keyword">int</span> lc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">int</span> h <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>                                <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span>                                    <span class="token punctuation">(</span>h<span class="token punctuation">,</span> e<span class="token punctuation">.</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span>val<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> loTail<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                        lo <span class="token operator">=</span> p<span class="token punctuation">;</span>                                    <span class="token keyword">else</span>                                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                                    loTail <span class="token operator">=</span> p<span class="token punctuation">;</span>                                    <span class="token operator">++</span>lc<span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> hiTail<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                        hi <span class="token operator">=</span> p<span class="token punctuation">;</span>                                    <span class="token keyword">else</span>                                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                                    hiTail <span class="token operator">=</span> p<span class="token punctuation">;</span>                                    <span class="token operator">++</span>hc<span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                            ln <span class="token operator">=</span> <span class="token punctuation">(</span>lc <span class="token operator">&lt;=</span> <span class="token constant">UNTREEIFY_THRESHOLD</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">untreeify</span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span> <span class="token operator">:</span>                                <span class="token punctuation">(</span>hc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>                            hn <span class="token operator">=</span> <span class="token punctuation">(</span>hc <span class="token operator">&lt;=</span> <span class="token constant">UNTREEIFY_THRESHOLD</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">untreeify</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span> <span class="token operator">:</span>                                <span class="token punctuation">(</span>lc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>                            <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                            advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>fn&amp;n</code>可以快速把链表中的元素区分成两类，A类是hash值的第X位为0，B类是hash值的第X位为1，并通过<code>lastRun</code>记录最后需要处理的节点，A类和B类节点可以分散到新数组的槽位14和30中，在原数组的槽位中，蓝色节点第X为0，红色节点第X为1，把链表拉平显示如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/2184951-5e60c316353e8a8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><ol><li><p>通过遍历链表，记录<code>runBit</code>和<code>lastRun</code>，分别为1和节点6，所以设置<code>hn</code>为节点6，<code>ln</code>为null；</p></li><li><p>重新遍历链表，以<code>lastRun</code>节点为终止条件，根据第X位的值分别构造ln链表和hn链表：</p><ol><li>ln：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2184951-00e946e7b274a8af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ln链"></p><ol start="2"><li><p>Hn:</p><p><img src="https://upload-images.jianshu.io/upload_images/2184951-bcc2a0170ec52d9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p></li></ol></li><li><p>通过CAS把ln链表设置到新数组的i位置，hn链表设置到i+n的位置；</p></li></ol><p>如果该槽位是红黑树结构，则构造树节点<code>lo</code>和<code>hi</code>，遍历红黑树中的节点，同样根据<code>hash&amp;n</code><a href="http://lib.csdn.net/base/datastructure">算法</a>，把节点分为两类，分别插入到<code>lo</code>和<code>hi</code>为头的链表中，根据<code>lo</code>和<code>hi</code>链表中的元素个数分别生成<code>ln</code>和<code>hn</code>节点，其中<code>ln</code>节点的生成逻辑如下：</p><ol><li>如果<code>lo</code>链表的元素个数小于等于<code>UNTREEIFY_THRESHOLD</code>，默认为6，则通过<code>untreeify</code>方法把树节点链表转化成普通节点链表；</li><li>否则判断<code>hi</code>链表中的元素个数是否等于0：如果等于0，表示<code>lo</code>链表中包含了所有原始节点，则设置原始红黑树给<code>ln</code>，否则根据<code>lo</code>链表重新构造红黑树。</li><li>最后，同样的通过CAS把<code>ln</code>设置到新数组的<code>i</code>位置，<code>hn</code>设置到<code>i+n</code>位置。</li></ol><p>​</p><h3 id="4-GET"><a href="#4-GET" class="headerlink" title="4. GET"></a>4. GET</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 相比put方法，get就很单纯了，支持并发操作， * 当key为null的时候回抛出NullPointerException的异常 * get操作通过首先计算key的hash值来确定该元素放在数组的哪个位置 * 然后遍历该位置的所有节点 * 如果不存在的话返回null */</span><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">,</span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> eh<span class="token punctuation">;</span> <span class="token class-name">K</span> ek<span class="token punctuation">;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ConcurrentHashMap类图&quot;&gt;&lt;a href=&quot;#ConcurrentHashMap类图&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentHashMap类图&quot;&gt;&lt;/a&gt;ConcurrentHashMap类图&lt;/h2&gt;&lt;p&gt;&lt;i</summary>
      
    
    
    
    <category term="coding" scheme="https://colania.github.io/categories/coding/"/>
    
    
    <category term="JAVA" scheme="https://colania.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>AI工具介绍</title>
    <link href="https://colania.github.io/2023/03/18/ai-gong-ju/"/>
    <id>https://colania.github.io/2023/03/18/ai-gong-ju/</id>
    <published>2023-03-18T03:20:09.000Z</published>
    <updated>2023-03-20T14:24:47.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AI工具介绍"><a href="#AI工具介绍" class="headerlink" title="AI工具介绍"></a>AI工具介绍</h1><p>随着当前网络数据量的爆发，基于大数据的AI，现在越来越智能了。尤其是chatgpt的推出，AI使用越来越广泛。</p><p>本文主要介绍当前广泛使用的AI工具。</p><h2 id="chatGPT"><a href="#chatGPT" class="headerlink" title="chatGPT"></a>chatGPT</h2><p>ChatGPT是一种基于Transformer架构的深度学习模型，可以对语言进行建模和生成。它可以处理问答、对话生成、文本生成等多种任务，可以认为是当前最为智能的AI工具。甚至有人将其称为新时代的奠基者，我们将从互联网时代进入AI时代。</p><p>当前chatGPT有两种使用方法：</p><ol><li>通过<a href="https://chat.openai.com/">官网</a>使用。</li><li>通过chatGPT - API 使用</li></ol><p>每个账号注册好以后，都有18美元的免费体验机会，这个还是相当给力的。</p><p>这里就不讲他如何注册了，当前网络上也有很多的注册方法，例如：</p><p><a href="https://juejin.cn/post/7198097078005841980">ChatGPT保姆级教程，一分钟学会使用ChatGPT</a></p><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><ol><li><p>如何更好的使用chatGPT呢，有些人在使用时，可能觉得这个ai好智障，怎么答非所问的。其实你需要给他一个“人设” 。 比如，你需要告诉chatGPT说假设你是一个精研开发多年的JAVA工程师，擅长微服务架构。后续再进行提问时，答案会更加精准。</p><p><a href="%5B%5D(https://github.com/colania/awesome-chatgpt-prompts)">已经整理好的chatGPT人设语句</a></p><p><a href="https://github.com/colania/awesome-chatgpt-prompts-zh">中文调教指南</a></p></li><li><p>基于chatGPT的比较好用的二次开发工具。</p><ol><li><p><a href="https://github.com/colania/ChatGPT-Telegram-Workers">tg机器人接入chatGPT-API，且不需要提供服务器</a></p></li><li><p><a href="https://github.com/colania/chatgpt-web">用 Express 和 Vue3 搭建的 ChatGPT 演示网页,需要服务器，需要翻墙</a></p></li></ol></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>自从ChatGPT发布以后，各种垂直领域的AI工具也被相继开发出来。作为软件开发，最先接触到的代码编写工具。</p><h3 id="cursor-so"><a href="#cursor-so" class="headerlink" title="cursor.so"></a><a href="https://www.cursor.so/">cursor.so</a></h3><p>尝试以后还是挺好用的，可以很容易的做一些需求，比如说算法题，还可以指定他的创作语言，哈哈哈哈。（字节大危机）</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230320215027345.png" alt="image-20230320215027345"></p><h3 id="Warp"><a href="#Warp" class="headerlink" title="Warp"></a><a href="https://www.warp.dev/">Warp</a></h3><p>warp其实是一个比较新的一个为开发人员打造的Terminal工具。</p><p>Warp解决的痛点，是通过减少配置、方便输入，优化输出，增加常用命令行自动提示(通过fig)，方便查看历史记录，可定义流程，等等实现的。（这些官方可以找到，还是挺好用的）</p><p>今天发现Warp也接入了chatGPT，每天有100次的体验机会。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230320215533735.png" alt="image-20230320215533735"></p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><h3 id="NotionAI"><a href="#NotionAI" class="headerlink" title="NotionAI"></a><a href="https://www.notion.so/product/ai">NotionAI</a></h3><p>Notion AI可以用来写文案、写策划、写表格、写视频脚本、帮忙读论文做总结等，只要涉及到文档相关的事情，他都会有很亮眼的发挥，可惜的是免费体验机会太少了，只有20次。（可以找某宝增加使用机会）</p><p>我在写一些文档的时候，很大一部分基础部分都会用他进行生成。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230320220639491.png" alt="image-20230320220639491"></p><h3 id="office-copilot"><a href="#office-copilot" class="headerlink" title="office copilot"></a>office copilot</h3><p>office copilot是我最为期待的一个工具。对外宣传可以<strong>协助用户生成文档、电子邮件、演示文稿和更多内容</strong>，而且演示效果也确实不错。但是现在还没有机会体验到。而且会接入到微软的所有office工具中，未来可期。</p><blockquote><p>With Copilot, you’re always in control. You decide what to keep, modify or discard. Now, you can be more creative in Word, more analytical in Excel, more expressive in PowerPoint, more productive in Outlook and more collaborative in Teams.</p></blockquote><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/2ndary-image-for-March-16_.webp" alt="2ndary-image-for-March-16_"></p><h2 id="绘画工具-只介绍通过网络提供服务的"><a href="#绘画工具-只介绍通过网络提供服务的" class="headerlink" title="绘画工具(只介绍通过网络提供服务的)"></a>绘画工具(只介绍通过网络提供服务的)</h2><p>AI绘画在人工智能领域中大放异彩，现在只要你浏览互联网，基本上都能发现各种AI画画，而且质量越来越高，越来越逼真，有很多创作已经分不清是照片还是AI绘画。</p><h3 id="DALL-E-2"><a href="#DALL-E-2" class="headerlink" title="DALL-E 2"></a><a href="https://openai.com/product/dall-e-2">DALL-E 2</a></h3><p>「DALL-E 2」，名称合成自超现实主义艺术家“萨尔瓦多·达利(Salvador Dalí)”和《机器人总动员》的英文名“WALL-E”。 也是OPEN-AI的作品之一。</p><p><img src="https://pic2.zhimg.com/v2-360acc4244e461369d92861fc23c60d9_b.jpg" alt="img"></p><h3 id="Midjourney"><a href="#Midjourney" class="headerlink" title="Midjourney"></a><a href="https://www.midjourney.com/">Midjourney</a></h3><p>Midjourney AI是架设在discord上一个AI工具，使用起来也很方便，可以不断的进行优化。生成效果真的不错。</p><p>我在使用时会通过chatGPT将我想要绘画的内容以Midjourney 能够识别的词提取关键字，然后再将这些关键词传给Midjourney进行绘画，效果还是不错滴。而且在频道中有很多大佬分享他们的AI创作。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230320221218533.png" alt="image-20230320221218533"></p><h3 id="StableDiffusion"><a href="#StableDiffusion" class="headerlink" title="StableDiffusion"></a><a href="https://huggingface.co/spaces/stabilityai/stable-diffusion">StableDiffusion</a></h3><p>“Stable Diffusion”是开源图像合成模型，这个 AI 作画工具几乎可以模仿任何视觉风格，如果你输入一个描述性短语，图像就会像魔术一样出现在你的屏幕上。 使用这个工具时，最重要的是找到他能够识别的关键词。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230320221727648.png" alt="image-20230320221727648"></p><h2 id="国内的AI工具"><a href="#国内的AI工具" class="headerlink" title="国内的AI工具"></a>国内的AI工具</h2><h3 id="文言一心"><a href="#文言一心" class="headerlink" title="文言一心"></a>文言一心</h3><p>虽然百度文言一心的发布会直播让人尬的直抠脚。没有进行现场演示，只敢放录播不敢实际操作，说的难听一点，<a href="https://www.zhihu.com/search?q=%E8%B4%BE%E8%B7%83%E4%BA%AD&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2939535808%7D">贾跃亭</a>如果是PPT造车的，那<a href="https://www.zhihu.com/search?q=%E6%9D%8E%E5%BD%A6%E5%AE%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2939535808%7D">李彦宏</a>就是PPT造了个AIGC的大模型。</p><p>在实际体验的时候，确实效果不尽如人意。但是很很明确的是，这个一定是百度自研的，而不是chatGPT套壳软件。在当前世界脱钩的情况下，在AI方面，拥有一款国产自主的工具也是会有很广泛的市场。目前来看，文言一心相比chatGPT来说也就落后一两年，希望能够不断进步，查缺补漏。</p><p>有人说发布会没开多久，股民直接就用脚投票了，但是后面几天的连续猛涨，还是能看出来市场很看好他的未来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AI工具介绍&quot;&gt;&lt;a href=&quot;#AI工具介绍&quot; class=&quot;headerlink&quot; title=&quot;AI工具介绍&quot;&gt;&lt;/a&gt;AI工具介绍&lt;/h1&gt;&lt;p&gt;随着当前网络数据量的爆发，基于大数据的AI，现在越来越智能了。尤其是chatgpt的推出，AI使用越来越广泛</summary>
      
    
    
    
    <category term="行业追踪" scheme="https://colania.github.io/categories/%E8%A1%8C%E4%B8%9A%E8%BF%BD%E8%B8%AA/"/>
    
    
    <category term="AI" scheme="https://colania.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>从微服务来看稳定性建设</title>
    <link href="https://colania.github.io/2023/03/18/cong-wei-fu-wu-lai-kan-wen-ding-xing-jian-she/"/>
    <id>https://colania.github.io/2023/03/18/cong-wei-fu-wu-lai-kan-wen-ding-xing-jian-she/</id>
    <published>2023-03-18T03:19:38.000Z</published>
    <updated>2023-03-20T09:09:06.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从微服务看稳定性建设"><a href="#从微服务看稳定性建设" class="headerlink" title="从微服务看稳定性建设"></a>从微服务看稳定性建设</h1><p>本文主要依据微服务，从”防范稳定性风险”和”降低故障影响”两个方面简单介绍了稳定性建面临的常见问题。</p><h2 id="1-防范稳定性风险"><a href="#1-防范稳定性风险" class="headerlink" title="1.防范稳定性风险"></a>1.防范稳定性风险</h2><p> 微服务架构让微服务的功能更加内聚，迭代速度更快，但是呢，增加了服务依赖复杂性，进而增大了稳定性建设难度。尽管其依赖关系复杂，但可抽象为上游服务、自身服务、下游服务三者的关系，稳定性风险防范的主要思路是防范三者的风险。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%8A%E4%B8%AD%E4%B8%8B.png" alt="上中下"></p><h3 id="1-1-防范上游风险"><a href="#1-1-防范上游风险" class="headerlink" title="1.1 防范上游风险"></a>1.1 防范上游风险</h3><blockquote><p>限流，输入校验。</p></blockquote><p>防范上游风险常见的是防范**”流量增加”<strong>和</strong>“输入错误”**风险。预期的流量增加可以提前容量评估并做好相关应对方案；对于非预期的流量增加，依赖提前设置好的限流预案。</p><p>限流的目的是自保或隔离影响，核心流量限流后可评估影响后扩容或临时调整限流阀值。</p><p>“输入错误”常见的是范围参数没有限制，比如预期只查询1天的数据，但请求参数传了查询1个月，因为接口没有限制，导致数据库抗不住压力而 down 机。</p><h3 id="1-2-防范下游风险"><a href="#1-2-防范下游风险" class="headerlink" title="1.2 防范下游风险"></a>1.2 防范下游风险</h3><blockquote><p>解除强依赖，降级、放火验证弱依赖，切流预案。</p></blockquote><p>业内定义，<strong>异常发生时，不影响核心业务流程，不影响系统可用性的依赖称作弱依赖，反之为强依赖。</strong>解除下游风险最直接的方法就是解除下游强依赖。</p><ol><li>在系统设计时要全面分析系统的强弱依赖关系，在系统上线后可以通过工具采集线上流量进一步分析依赖关系。</li><li>需要对历史业务进行改造，并在功能、体验和稳定性方面进行取舍。为了保障稳定性，实现最小化强依赖下游的系统，非核心功能在下游依赖故障时进行功能裁剪，确保核心功能一直可用。</li></ol><p>弱依赖需要建设降级预案。可以使用Sentinel等多种开源流量治理组件。为了保障预案的执行效率，更推荐的做法是业务代码容错+自动熔断功能。</p><p>降级方式的选择与业务降级影响相关性较大，一般降级之后影响较大的使用手动降级，而对于降级之后影响较小或后期能快速自动修复的功能可考虑自动降级。</p><p>需要经常去验证强弱依赖治理情况。如果接口、服务等比较简单，可以使用单测方式进行验证。如果服务多且复杂的话，需要通过<strong>故障演练</strong>定期排查。</p><p>对于无法解除的强依赖，我们可以考虑一些降低风险的方法，提高稳定性，保障不出大事。</p><ol><li>mysql 可以增加足够多的分片来降低单个分片挂掉带来的影响。</li><li>制定良好的应急预案进行兜底，同时应该提供良好的用户体验。</li><li>单机房故障优先考虑切流止损。</li></ol><h3 id="1-3-防范自身风险"><a href="#1-3-防范自身风险" class="headerlink" title="1.3 防范自身风险"></a>1.3 防范自身风险</h3><blockquote><p>架构风险、容量风险，切流预案，线上变更规范，研发和测试质量保障。</p></blockquote><p>比较基本的是通过冗余布署、多活切流来规避单点故障；使用弹性云、自动扩容来减少容量风险。周期性的哨兵压测、全链路压测、模块级的压测进行容量评估。<br>从经常引发线上事故的原因中，代码变更和配置变动占极大多数；因此提高研发和测试质量，严守线上变更规范是防范自身风险的重点。</p><p>提高研发质量，这里主要是从稳定性角度看，需要研发的同学有写自动化 case 的意识；虽然短期来看写 case 会增加研发的时间成本，但是 case 可以大大提高后期迭代的测试效率和代码质量；对于核心业务系统，不断迭代是必然的，因此从长远来看写 case 的成本应该是可接受的。</p><h2 id="2-降低故障影响"><a href="#2-降低故障影响" class="headerlink" title="2. 降低故障影响"></a>2. 降低故障影响</h2><p>是人就会犯错，因此故障是不可避免的。我们除了防范风险外，还需要一些措施来降低故障带来的影响。</p><h3 id="2-1-自身接口降级"><a href="#2-1-自身接口降级" class="headerlink" title="2.1 自身接口降级"></a>2.1 自身接口降级</h3><blockquote><p>理清核心链路的上游依赖，接口能力降级。</p></blockquote><p>作为业务链路的一部份，需要明确我们的服务在上游核心链路的强弱依赖关系。若上游弱依赖我们的服务，我们需要保障被依赖的接口支持接口能力降级；若上游强依赖我们的服务，则需要考虑推动上游解除对我们服务的强依赖关系，若不能解除的，则需要考虑建设备用的通道或其它能降低上游影响的方案，比如面向用户的故障引导文案、公告等。</p><p>总之，我们不仅需要关注自身服务的稳定性，还需要关注上游对我们服务的依赖关系并建设预案，以此来降低自身服务故障对上游的影响。请注意，这里的接口能力降级与上文的依赖降级是不同的，此处的接口能力降级是自身服务能力降级，目的是减少对上游服务影响；而上文的依赖降级是熔断下游降级，目的是减少自身服务受下游故障影响，这是服务处于不同层级时的不同预案。</p><h3 id="2-2-故障感知和定位"><a href="#2-2-故障感知和定位" class="headerlink" title="2.2 故障感知和定位"></a>2.2 故障感知和定位</h3><blockquote><p>监控报警，故障根因定位，应急响应流程。</p></blockquote><p>核心的服务指标、业务指标的监控和报警尽量100%覆盖，覆盖率是一方面，报警的时效和准确性也是非常关建的。做好链路可观测、日志可追溯、服务器性能可视化，都是故障感知和根因定位的有效工具。</p><p>建设指标时，可以考虑 metric 指标标准化，其不但能降低理解成本，提高问题定位效率。</p><p>在提高核心指标的报警时效和准确性方面，可以考虑从某一个方向重点监控，减少维护的成本，推荐从业务结果指标进行监控（过程指标可用于协助定位问题）。其原因是，业务过程指标多且变更频繁，还可能跨多个系统，较为分散，而其结果往往是收敛的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从微服务看稳定性建设&quot;&gt;&lt;a href=&quot;#从微服务看稳定性建设&quot; class=&quot;headerlink&quot; title=&quot;从微服务看稳定性建设&quot;&gt;&lt;/a&gt;从微服务看稳定性建设&lt;/h1&gt;&lt;p&gt;本文主要依据微服务，从”防范稳定性风险”和”降低故障影响”两个方面简单介绍了</summary>
      
    
    
    
    <category term="coding" scheme="https://colania.github.io/categories/coding/"/>
    
    
    <category term="稳定性建设" scheme="https://colania.github.io/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>Spring-session线上问题复盘</title>
    <link href="https://colania.github.io/2023/03/18/spring-session-xian-shang-wen-ti-fu-pan/"/>
    <id>https://colania.github.io/2023/03/18/spring-session-xian-shang-wen-ti-fu-pan/</id>
    <published>2023-03-18T03:07:04.000Z</published>
    <updated>2023-03-20T09:03:36.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-session线上问题复盘"><a href="#spring-session线上问题复盘" class="headerlink" title="spring-session线上问题复盘"></a>spring-session线上问题复盘</h2><h3 id="发现问题流程"><a href="#发现问题流程" class="headerlink" title="发现问题流程"></a>发现问题流程</h3><ol><li>基础服务的CPU告警，当时对基础服务进行了重启操作，重启之后负载下降暂时恢复。</li><li>10时50分dba查看到redis 实时连接数有点高超过2500，还有一些慢查询，后面redis也开始告警</li><li>打印服务出现异常的网络连接，立即对服务器进行了重启操作。</li><li>基础服务出现CPU告警，然后又对相关的基础服务进行重启操作。</li><li>打印服务负载情况大家认为是打印服务导致了整个系统缓慢，紧急对打印服务进行了节点扩展，结果是11时30几分反馈系统能使用，整体操作上比较卡。</li><li>redis 服务CPU告警</li><li>14时12分又开始收到用户反馈系统卡，无法正常打开页面访问，其他服务都出现相同情况，当时的现象是出现redis 的QPS急速飙升高峰到80000+</li><li>根据当时的现象表现整个系统很卡，redis 的QPS很高是平时的好几倍，redis的连接数也很高快到达了5000，日志上也有出现各种redis连接超时，甚至有出现redis oom 等报错。当时大家都比较怀疑是redis出现了问题，导致系统变慢变卡，然后对redis的存储对象进行了排查，没有发现特别大的存储key，又对存储的key数量进行了排查（思路是查找出key前缀相同排名前几的key，然后去分析具体是什么操作引起的）。经过dba 的查看分析发现 spring:session:sessions 开头的key占用了将近600万，这个key主要是spring session使用redis存储产生的，非常的异常，为什么会产生这么多。</li></ol><blockquote><p>当时情况是有两个系统都是使用了相同的redis，没有分离业务存储和登录信息存储，提出的解决方案。</p><ol><li>将两种存储分离，使用不同的redis进行存储，减轻同个redis的链接操作压力。</li><li>引入redis集群模式，来分散登录存储redis 的服务器压力。一方面进行分离方案的进行，另一方面继续排查redis引起的问题原因。</li><li>在分离redis过程中也对redis配置进行了优化，增加了连接池、最大连接数、超时时间等配置。</li></ol></blockquote><ol start="9"><li><p>改完代码和配置后在测试环境验证，发现一个奇怪的现象，新增的redis出现了大量的<strong>spring:session:sessions key</strong>, 没一会功夫redis出现了差不多18万的key，这个异常的情况大家讨论出各个系统使用了spring session redis来进行存储登录信息，应该是内网调用产生了大量无用key） ，spring session会在请求进来时候获取请求头COOKIE里面的<strong>SESSION</strong>，假如不存在对应的key，就会自动生成三条key的存储.每一个session，Redis实际缓存的数据如下：</p><pre class="line-numbers language-none"><code class="language-none">spring:session:sessions:0704a610-7941-4fc7-9379-7fc3ad4ce8d0     spring:session:sessions:expires:0704a610-7941-4fc7-9379-7fc3ad4ce8d0spring:session:expirations:1557389100000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Redis过期键有三种删除策略，分别是定时删除，惰性删除，定期删除。</p><p>1.定时删除：通过维护一个定时器，过期马上删除，是最有效的，但是也是最浪费cpu时间的。</p><p>2.惰性删除：程序在取出键时才判断它是否过期，过期才删除，这个方法对cpu时间友好，对内存不友好。</p><p>3.定期删除：每隔一定时间执行一次删除过期键的操作，并限制每次删除操作的执行时长和频率，是一种折中。</p><p>Redis采用了惰性删除和定期删除的策略。由此可见依赖 Redis 的过期策略实时删除过期key是不可靠的。</p></blockquote></li></ol><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>问题找到了，需要定位产生问题的原因。产生该问题的原因有两个：</p><ol><li>引入了外部的jar包，由于引入的包又不干净，间接的引入了大量的依赖包，触发了spring session redis存储功能</li><li>spring redis配置不合理刚好开启了开关，另外配置没有进行redis连接池化</li></ol><p>定位到是引入的一个日志包附带引入了spring-session-core 和 spring-session-data-redis这个包,（原先系统是没有这些包依赖的，所以即使配置配了实际也没有生效），引入之后加上配置本身存在，默认启用了spring redis session，最终出现了feign调用和内网调用会产生大量的spring session，存储到redis中。</p><pre class="line-numbers language-none"><code class="language-none">getSession方法默认create为true，所以根本原因是，服务间的feign接口，以及其他所有请求到云记账的内部http接口，request对象中没有sessionId导致spring session一直在创建session并保存到redis中，且这些session是无用的，随着请求的积累，redis压力越来越大<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>目前不需要共享session，所以无需spring-session</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spring-session线上问题复盘&quot;&gt;&lt;a href=&quot;#spring-session线上问题复盘&quot; class=&quot;headerlink&quot; title=&quot;spring-session线上问题复盘&quot;&gt;&lt;/a&gt;spring-session线上问题复盘&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="coding" scheme="https://colania.github.io/categories/coding/"/>
    
    
    <category term="故障复盘" scheme="https://colania.github.io/tags/%E6%95%85%E9%9A%9C%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
</feed>
