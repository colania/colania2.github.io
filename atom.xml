<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ocean Pig Blog</title>
  
  <subtitle>求知若渴，虚怀若谷</subtitle>
  <link href="https://colania.github.io/atom.xml" rel="self"/>
  
  <link href="https://colania.github.io/"/>
  <updated>2023-03-18T03:45:01.660Z</updated>
  <id>https://colania.github.io/</id>
  
  <author>
    <name>WWEI</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://colania.github.io/2023/03/18/hello-world/"/>
    <id>https://colania.github.io/2023/03/18/hello-world/</id>
    <published>2023-03-18T03:38:29.587Z</published>
    <updated>2023-03-18T03:45:01.660Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="java" scheme="https://colania.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>测试文章4</title>
    <link href="https://colania.github.io/2023/03/18/ce-shi-wen-zhang-4/"/>
    <id>https://colania.github.io/2023/03/18/ce-shi-wen-zhang-4/</id>
    <published>2023-03-18T03:29:10.000Z</published>
    <updated>2023-03-18T03:29:38.451Z</updated>
    
    
    
    
    <category term="essay" scheme="https://colania.github.io/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>测试文章3</title>
    <link href="https://colania.github.io/2023/03/18/ce-shi-wen-zhang-3/"/>
    <id>https://colania.github.io/2023/03/18/ce-shi-wen-zhang-3/</id>
    <published>2023-03-18T03:20:09.000Z</published>
    <updated>2023-03-18T03:20:20.485Z</updated>
    
    
    
    
    <category term="internetNews" scheme="https://colania.github.io/categories/internetNews/"/>
    
    
  </entry>
  
  <entry>
    <title>从微服务来看稳定性建设</title>
    <link href="https://colania.github.io/2023/03/18/cong-wei-fu-wu-lai-kan-wen-ding-xing-jian-she/"/>
    <id>https://colania.github.io/2023/03/18/cong-wei-fu-wu-lai-kan-wen-ding-xing-jian-she/</id>
    <published>2023-03-18T03:19:38.000Z</published>
    <updated>2023-03-20T09:09:06.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从微服务看稳定性建设"><a href="#从微服务看稳定性建设" class="headerlink" title="从微服务看稳定性建设"></a>从微服务看稳定性建设</h1><p>本文主要依据微服务，从”防范稳定性风险”和”降低故障影响”两个方面简单介绍了稳定性建面临的常见问题。</p><h2 id="1-防范稳定性风险"><a href="#1-防范稳定性风险" class="headerlink" title="1.防范稳定性风险"></a>1.防范稳定性风险</h2><p> 微服务架构让微服务的功能更加内聚，迭代速度更快，但是呢，增加了服务依赖复杂性，进而增大了稳定性建设难度。尽管其依赖关系复杂，但可抽象为上游服务、自身服务、下游服务三者的关系，稳定性风险防范的主要思路是防范三者的风险。</p><p><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%8A%E4%B8%AD%E4%B8%8B.png" alt="上中下"></p><h3 id="1-1-防范上游风险"><a href="#1-1-防范上游风险" class="headerlink" title="1.1 防范上游风险"></a>1.1 防范上游风险</h3><blockquote><p>限流，输入校验。</p></blockquote><p>防范上游风险常见的是防范**”流量增加”<strong>和</strong>“输入错误”**风险。预期的流量增加可以提前容量评估并做好相关应对方案；对于非预期的流量增加，依赖提前设置好的限流预案。</p><p>限流的目的是自保或隔离影响，核心流量限流后可评估影响后扩容或临时调整限流阀值。</p><p>“输入错误”常见的是范围参数没有限制，比如预期只查询1天的数据，但请求参数传了查询1个月，因为接口没有限制，导致数据库抗不住压力而 down 机。</p><h3 id="1-2-防范下游风险"><a href="#1-2-防范下游风险" class="headerlink" title="1.2 防范下游风险"></a>1.2 防范下游风险</h3><blockquote><p>解除强依赖，降级、放火验证弱依赖，切流预案。</p></blockquote><p>业内定义，<strong>异常发生时，不影响核心业务流程，不影响系统可用性的依赖称作弱依赖，反之为强依赖。</strong>解除下游风险最直接的方法就是解除下游强依赖。</p><ol><li>在系统设计时要全面分析系统的强弱依赖关系，在系统上线后可以通过工具采集线上流量进一步分析依赖关系。</li><li>需要对历史业务进行改造，并在功能、体验和稳定性方面进行取舍。为了保障稳定性，实现最小化强依赖下游的系统，非核心功能在下游依赖故障时进行功能裁剪，确保核心功能一直可用。</li></ol><p>弱依赖需要建设降级预案。可以使用Sentinel等多种开源流量治理组件。为了保障预案的执行效率，更推荐的做法是业务代码容错+自动熔断功能。</p><p>降级方式的选择与业务降级影响相关性较大，一般降级之后影响较大的使用手动降级，而对于降级之后影响较小或后期能快速自动修复的功能可考虑自动降级。</p><p>需要经常去验证强弱依赖治理情况。如果接口、服务等比较简单，可以使用单测方式进行验证。如果服务多且复杂的话，需要通过<strong>故障演练</strong>定期排查。</p><p>对于无法解除的强依赖，我们可以考虑一些降低风险的方法，提高稳定性，保障不出大事。</p><ol><li>mysql 可以增加足够多的分片来降低单个分片挂掉带来的影响。</li><li>制定良好的应急预案进行兜底，同时应该提供良好的用户体验。</li><li>单机房故障优先考虑切流止损。</li></ol><h3 id="1-3-防范自身风险"><a href="#1-3-防范自身风险" class="headerlink" title="1.3 防范自身风险"></a>1.3 防范自身风险</h3><blockquote><p>架构风险、容量风险，切流预案，线上变更规范，研发和测试质量保障。</p></blockquote><p>比较基本的是通过冗余布署、多活切流来规避单点故障；使用弹性云、自动扩容来减少容量风险。周期性的哨兵压测、全链路压测、模块级的压测进行容量评估。<br>从经常引发线上事故的原因中，代码变更和配置变动占极大多数；因此提高研发和测试质量，严守线上变更规范是防范自身风险的重点。</p><p>提高研发质量，这里主要是从稳定性角度看，需要研发的同学有写自动化 case 的意识；虽然短期来看写 case 会增加研发的时间成本，但是 case 可以大大提高后期迭代的测试效率和代码质量；对于核心业务系统，不断迭代是必然的，因此从长远来看写 case 的成本应该是可接受的。</p><h2 id="2-降低故障影响"><a href="#2-降低故障影响" class="headerlink" title="2. 降低故障影响"></a>2. 降低故障影响</h2><p>是人就会犯错，因此故障是不可避免的。我们除了防范风险外，还需要一些措施来降低故障带来的影响。</p><h3 id="2-1-自身接口降级"><a href="#2-1-自身接口降级" class="headerlink" title="2.1 自身接口降级"></a>2.1 自身接口降级</h3><blockquote><p>理清核心链路的上游依赖，接口能力降级。</p></blockquote><p>作为业务链路的一部份，需要明确我们的服务在上游核心链路的强弱依赖关系。若上游弱依赖我们的服务，我们需要保障被依赖的接口支持接口能力降级；若上游强依赖我们的服务，则需要考虑推动上游解除对我们服务的强依赖关系，若不能解除的，则需要考虑建设备用的通道或其它能降低上游影响的方案，比如面向用户的故障引导文案、公告等。</p><p>总之，我们不仅需要关注自身服务的稳定性，还需要关注上游对我们服务的依赖关系并建设预案，以此来降低自身服务故障对上游的影响。请注意，这里的接口能力降级与上文的依赖降级是不同的，此处的接口能力降级是自身服务能力降级，目的是减少对上游服务影响；而上文的依赖降级是熔断下游降级，目的是减少自身服务受下游故障影响，这是服务处于不同层级时的不同预案。</p><h3 id="2-2-故障感知和定位"><a href="#2-2-故障感知和定位" class="headerlink" title="2.2 故障感知和定位"></a>2.2 故障感知和定位</h3><blockquote><p>监控报警，故障根因定位，应急响应流程。</p></blockquote><p>核心的服务指标、业务指标的监控和报警尽量100%覆盖，覆盖率是一方面，报警的时效和准确性也是非常关建的。做好链路可观测、日志可追溯、服务器性能可视化，都是故障感知和根因定位的有效工具。</p><p>建设指标时，可以考虑 metric 指标标准化，其不但能降低理解成本，提高问题定位效率。</p><p>在提高核心指标的报警时效和准确性方面，可以考虑从某一个方向重点监控，减少维护的成本，推荐从业务结果指标进行监控（过程指标可用于协助定位问题）。其原因是，业务过程指标多且变更频繁，还可能跨多个系统，较为分散，而其结果往往是收敛的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从微服务看稳定性建设&quot;&gt;&lt;a href=&quot;#从微服务看稳定性建设&quot; class=&quot;headerlink&quot; title=&quot;从微服务看稳定性建设&quot;&gt;&lt;/a&gt;从微服务看稳定性建设&lt;/h1&gt;&lt;p&gt;本文主要依据微服务，从”防范稳定性风险”和”降低故障影响”两个方面简单介绍了</summary>
      
    
    
    
    <category term="coding" scheme="https://colania.github.io/categories/coding/"/>
    
    
    <category term="稳定性建设" scheme="https://colania.github.io/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>Spring-session线上问题复盘</title>
    <link href="https://colania.github.io/2023/03/18/spring-session-xian-shang-wen-ti-fu-pan/"/>
    <id>https://colania.github.io/2023/03/18/spring-session-xian-shang-wen-ti-fu-pan/</id>
    <published>2023-03-18T03:07:04.000Z</published>
    <updated>2023-03-20T09:03:36.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-session线上问题复盘"><a href="#spring-session线上问题复盘" class="headerlink" title="spring-session线上问题复盘"></a>spring-session线上问题复盘</h2><h3 id="发现问题流程"><a href="#发现问题流程" class="headerlink" title="发现问题流程"></a>发现问题流程</h3><ol><li>基础服务的CPU告警，当时对基础服务进行了重启操作，重启之后负载下降暂时恢复。</li><li>10时50分dba查看到redis 实时连接数有点高超过2500，还有一些慢查询，后面redis也开始告警</li><li>打印服务出现异常的网络连接，立即对服务器进行了重启操作。</li><li>基础服务出现CPU告警，然后又对相关的基础服务进行重启操作。</li><li>打印服务负载情况大家认为是打印服务导致了整个系统缓慢，紧急对打印服务进行了节点扩展，结果是11时30几分反馈系统能使用，整体操作上比较卡。</li><li>redis 服务CPU告警</li><li>14时12分又开始收到用户反馈系统卡，无法正常打开页面访问，其他服务都出现相同情况，当时的现象是出现redis 的QPS急速飙升高峰到80000+</li><li>根据当时的现象表现整个系统很卡，redis 的QPS很高是平时的好几倍，redis的连接数也很高快到达了5000，日志上也有出现各种redis连接超时，甚至有出现redis oom 等报错。当时大家都比较怀疑是redis出现了问题，导致系统变慢变卡，然后对redis的存储对象进行了排查，没有发现特别大的存储key，又对存储的key数量进行了排查（思路是查找出key前缀相同排名前几的key，然后去分析具体是什么操作引起的）。经过dba 的查看分析发现 spring:session:sessions 开头的key占用了将近600万，这个key主要是spring session使用redis存储产生的，非常的异常，为什么会产生这么多。</li></ol><blockquote><p>当时情况是有两个系统都是使用了相同的redis，没有分离业务存储和登录信息存储，提出的解决方案。</p><ol><li>将两种存储分离，使用不同的redis进行存储，减轻同个redis的链接操作压力。</li><li>引入redis集群模式，来分散登录存储redis 的服务器压力。一方面进行分离方案的进行，另一方面继续排查redis引起的问题原因。</li><li>在分离redis过程中也对redis配置进行了优化，增加了连接池、最大连接数、超时时间等配置。</li></ol></blockquote><ol start="9"><li><p>改完代码和配置后在测试环境验证，发现一个奇怪的现象，新增的redis出现了大量的<strong>spring:session:sessions key</strong>, 没一会功夫redis出现了差不多18万的key，这个异常的情况大家讨论出各个系统使用了spring session redis来进行存储登录信息，应该是内网调用产生了大量无用key） ，spring session会在请求进来时候获取请求头COOKIE里面的<strong>SESSION</strong>，假如不存在对应的key，就会自动生成三条key的存储.每一个session，Redis实际缓存的数据如下：</p><pre class="line-numbers language-none"><code class="language-none">spring:session:sessions:0704a610-7941-4fc7-9379-7fc3ad4ce8d0     spring:session:sessions:expires:0704a610-7941-4fc7-9379-7fc3ad4ce8d0spring:session:expirations:1557389100000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Redis过期键有三种删除策略，分别是定时删除，惰性删除，定期删除。</p><p>1.定时删除：通过维护一个定时器，过期马上删除，是最有效的，但是也是最浪费cpu时间的。</p><p>2.惰性删除：程序在取出键时才判断它是否过期，过期才删除，这个方法对cpu时间友好，对内存不友好。</p><p>3.定期删除：每隔一定时间执行一次删除过期键的操作，并限制每次删除操作的执行时长和频率，是一种折中。</p><p>Redis采用了惰性删除和定期删除的策略。由此可见依赖 Redis 的过期策略实时删除过期key是不可靠的。</p></blockquote></li></ol><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>问题找到了，需要定位产生问题的原因。产生该问题的原因有两个：</p><ol><li>引入了外部的jar包，由于引入的包又不干净，间接的引入了大量的依赖包，触发了spring session redis存储功能</li><li>spring redis配置不合理刚好开启了开关，另外配置没有进行redis连接池化</li></ol><p>定位到是引入的一个日志包附带引入了spring-session-core 和 spring-session-data-redis这个包,（原先系统是没有这些包依赖的，所以即使配置配了实际也没有生效），引入之后加上配置本身存在，默认启用了spring redis session，最终出现了feign调用和内网调用会产生大量的spring session，存储到redis中。</p><pre class="line-numbers language-none"><code class="language-none">getSession方法默认create为true，所以根本原因是，服务间的feign接口，以及其他所有请求到云记账的内部http接口，request对象中没有sessionId导致spring session一直在创建session并保存到redis中，且这些session是无用的，随着请求的积累，redis压力越来越大<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>目前不需要共享session，所以无需spring-session</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spring-session线上问题复盘&quot;&gt;&lt;a href=&quot;#spring-session线上问题复盘&quot; class=&quot;headerlink&quot; title=&quot;spring-session线上问题复盘&quot;&gt;&lt;/a&gt;spring-session线上问题复盘&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="coding" scheme="https://colania.github.io/categories/coding/"/>
    
    
    <category term="故障复盘" scheme="https://colania.github.io/tags/%E6%95%85%E9%9A%9C%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
</feed>
